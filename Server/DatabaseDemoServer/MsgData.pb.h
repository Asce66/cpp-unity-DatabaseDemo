// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MsgData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MsgData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MsgData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MsgData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[49]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MsgData_2eproto;
namespace Protocol {
class Book;
class BookDefaultTypeInternal;
extern BookDefaultTypeInternal _Book_default_instance_;
class C2SAddBooks;
class C2SAddBooksDefaultTypeInternal;
extern C2SAddBooksDefaultTypeInternal _C2SAddBooks_default_instance_;
class C2SAddDepartment;
class C2SAddDepartmentDefaultTypeInternal;
extern C2SAddDepartmentDefaultTypeInternal _C2SAddDepartment_default_instance_;
class C2SAddDoWeiWen;
class C2SAddDoWeiWenDefaultTypeInternal;
extern C2SAddDoWeiWenDefaultTypeInternal _C2SAddDoWeiWen_default_instance_;
class C2SAddDoYanTao;
class C2SAddDoYanTaoDefaultTypeInternal;
extern C2SAddDoYanTaoDefaultTypeInternal _C2SAddDoYanTao_default_instance_;
class C2SAddWeiWen;
class C2SAddWeiWenDefaultTypeInternal;
extern C2SAddWeiWenDefaultTypeInternal _C2SAddWeiWen_default_instance_;
class C2SAddWriteBook;
class C2SAddWriteBookDefaultTypeInternal;
extern C2SAddWriteBookDefaultTypeInternal _C2SAddWriteBook_default_instance_;
class C2SAddYanTao;
class C2SAddYanTaoDefaultTypeInternal;
extern C2SAddYanTaoDefaultTypeInternal _C2SAddYanTao_default_instance_;
class C2SBook;
class C2SBookDefaultTypeInternal;
extern C2SBookDefaultTypeInternal _C2SBook_default_instance_;
class C2SDeleteBooks;
class C2SDeleteBooksDefaultTypeInternal;
extern C2SDeleteBooksDefaultTypeInternal _C2SDeleteBooks_default_instance_;
class C2SDeleteDepartment;
class C2SDeleteDepartmentDefaultTypeInternal;
extern C2SDeleteDepartmentDefaultTypeInternal _C2SDeleteDepartment_default_instance_;
class C2SDeleteDoYanTao;
class C2SDeleteDoYanTaoDefaultTypeInternal;
extern C2SDeleteDoYanTaoDefaultTypeInternal _C2SDeleteDoYanTao_default_instance_;
class C2SDeleteWeiWen;
class C2SDeleteWeiWenDefaultTypeInternal;
extern C2SDeleteWeiWenDefaultTypeInternal _C2SDeleteWeiWen_default_instance_;
class C2SDeleteYanTao;
class C2SDeleteYanTaoDefaultTypeInternal;
extern C2SDeleteYanTaoDefaultTypeInternal _C2SDeleteYanTao_default_instance_;
class C2SDepartment;
class C2SDepartmentDefaultTypeInternal;
extern C2SDepartmentDefaultTypeInternal _C2SDepartment_default_instance_;
class C2SDoWeiWen;
class C2SDoWeiWenDefaultTypeInternal;
extern C2SDoWeiWenDefaultTypeInternal _C2SDoWeiWen_default_instance_;
class C2SDoYanTao;
class C2SDoYanTaoDefaultTypeInternal;
extern C2SDoYanTaoDefaultTypeInternal _C2SDoYanTao_default_instance_;
class C2SSearchDoWeiwen;
class C2SSearchDoWeiwenDefaultTypeInternal;
extern C2SSearchDoWeiwenDefaultTypeInternal _C2SSearchDoWeiwen_default_instance_;
class C2SSearchDoYanTao;
class C2SSearchDoYanTaoDefaultTypeInternal;
extern C2SSearchDoYanTaoDefaultTypeInternal _C2SSearchDoYanTao_default_instance_;
class C2SSearchWriteBook;
class C2SSearchWriteBookDefaultTypeInternal;
extern C2SSearchWriteBookDefaultTypeInternal _C2SSearchWriteBook_default_instance_;
class C2SUpdateBooks;
class C2SUpdateBooksDefaultTypeInternal;
extern C2SUpdateBooksDefaultTypeInternal _C2SUpdateBooks_default_instance_;
class C2SUpdateDepartment;
class C2SUpdateDepartmentDefaultTypeInternal;
extern C2SUpdateDepartmentDefaultTypeInternal _C2SUpdateDepartment_default_instance_;
class C2SUpdateDoYanTao;
class C2SUpdateDoYanTaoDefaultTypeInternal;
extern C2SUpdateDoYanTaoDefaultTypeInternal _C2SUpdateDoYanTao_default_instance_;
class C2SUpdateWeiWen;
class C2SUpdateWeiWenDefaultTypeInternal;
extern C2SUpdateWeiWenDefaultTypeInternal _C2SUpdateWeiWen_default_instance_;
class C2SUpdateYanTao;
class C2SUpdateYanTaoDefaultTypeInternal;
extern C2SUpdateYanTaoDefaultTypeInternal _C2SUpdateYanTao_default_instance_;
class C2SWeiWen;
class C2SWeiWenDefaultTypeInternal;
extern C2SWeiWenDefaultTypeInternal _C2SWeiWen_default_instance_;
class C2SWriteBook;
class C2SWriteBookDefaultTypeInternal;
extern C2SWriteBookDefaultTypeInternal _C2SWriteBook_default_instance_;
class C2SYanTao;
class C2SYanTaoDefaultTypeInternal;
extern C2SYanTaoDefaultTypeInternal _C2SYanTao_default_instance_;
class Department;
class DepartmentDefaultTypeInternal;
extern DepartmentDefaultTypeInternal _Department_default_instance_;
class DoWeiWen;
class DoWeiWenDefaultTypeInternal;
extern DoWeiWenDefaultTypeInternal _DoWeiWen_default_instance_;
class DoYanTao;
class DoYanTaoDefaultTypeInternal;
extern DoYanTaoDefaultTypeInternal _DoYanTao_default_instance_;
class S2CBook;
class S2CBookDefaultTypeInternal;
extern S2CBookDefaultTypeInternal _S2CBook_default_instance_;
class S2CDepartment;
class S2CDepartmentDefaultTypeInternal;
extern S2CDepartmentDefaultTypeInternal _S2CDepartment_default_instance_;
class S2CDoYanTao;
class S2CDoYanTaoDefaultTypeInternal;
extern S2CDoYanTaoDefaultTypeInternal _S2CDoYanTao_default_instance_;
class S2CSearchDoWeiwen;
class S2CSearchDoWeiwenDefaultTypeInternal;
extern S2CSearchDoWeiwenDefaultTypeInternal _S2CSearchDoWeiwen_default_instance_;
class S2CSearchDoYanTao;
class S2CSearchDoYanTaoDefaultTypeInternal;
extern S2CSearchDoYanTaoDefaultTypeInternal _S2CSearchDoYanTao_default_instance_;
class S2CSearchWriteBook;
class S2CSearchWriteBookDefaultTypeInternal;
extern S2CSearchWriteBookDefaultTypeInternal _S2CSearchWriteBook_default_instance_;
class S2CWeiWen;
class S2CWeiWenDefaultTypeInternal;
extern S2CWeiWenDefaultTypeInternal _S2CWeiWen_default_instance_;
class S2CWriteBook;
class S2CWriteBookDefaultTypeInternal;
extern S2CWriteBookDefaultTypeInternal _S2CWriteBook_default_instance_;
class S2CYanTao;
class S2CYanTaoDefaultTypeInternal;
extern S2CYanTaoDefaultTypeInternal _S2CYanTao_default_instance_;
class S2cDoWeiWen;
class S2cDoWeiWenDefaultTypeInternal;
extern S2cDoWeiWenDefaultTypeInternal _S2cDoWeiWen_default_instance_;
class UpdateBook;
class UpdateBookDefaultTypeInternal;
extern UpdateBookDefaultTypeInternal _UpdateBook_default_instance_;
class UpdateDepartment;
class UpdateDepartmentDefaultTypeInternal;
extern UpdateDepartmentDefaultTypeInternal _UpdateDepartment_default_instance_;
class UpdateDoYanTao;
class UpdateDoYanTaoDefaultTypeInternal;
extern UpdateDoYanTaoDefaultTypeInternal _UpdateDoYanTao_default_instance_;
class UpdateWeiWen;
class UpdateWeiWenDefaultTypeInternal;
extern UpdateWeiWenDefaultTypeInternal _UpdateWeiWen_default_instance_;
class UpdateYanTao;
class UpdateYanTaoDefaultTypeInternal;
extern UpdateYanTaoDefaultTypeInternal _UpdateYanTao_default_instance_;
class WeiWen;
class WeiWenDefaultTypeInternal;
extern WeiWenDefaultTypeInternal _WeiWen_default_instance_;
class WriteBook;
class WriteBookDefaultTypeInternal;
extern WriteBookDefaultTypeInternal _WriteBook_default_instance_;
class YanTao;
class YanTaoDefaultTypeInternal;
extern YanTaoDefaultTypeInternal _YanTao_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::Book* Arena::CreateMaybeMessage<::Protocol::Book>(Arena*);
template<> ::Protocol::C2SAddBooks* Arena::CreateMaybeMessage<::Protocol::C2SAddBooks>(Arena*);
template<> ::Protocol::C2SAddDepartment* Arena::CreateMaybeMessage<::Protocol::C2SAddDepartment>(Arena*);
template<> ::Protocol::C2SAddDoWeiWen* Arena::CreateMaybeMessage<::Protocol::C2SAddDoWeiWen>(Arena*);
template<> ::Protocol::C2SAddDoYanTao* Arena::CreateMaybeMessage<::Protocol::C2SAddDoYanTao>(Arena*);
template<> ::Protocol::C2SAddWeiWen* Arena::CreateMaybeMessage<::Protocol::C2SAddWeiWen>(Arena*);
template<> ::Protocol::C2SAddWriteBook* Arena::CreateMaybeMessage<::Protocol::C2SAddWriteBook>(Arena*);
template<> ::Protocol::C2SAddYanTao* Arena::CreateMaybeMessage<::Protocol::C2SAddYanTao>(Arena*);
template<> ::Protocol::C2SBook* Arena::CreateMaybeMessage<::Protocol::C2SBook>(Arena*);
template<> ::Protocol::C2SDeleteBooks* Arena::CreateMaybeMessage<::Protocol::C2SDeleteBooks>(Arena*);
template<> ::Protocol::C2SDeleteDepartment* Arena::CreateMaybeMessage<::Protocol::C2SDeleteDepartment>(Arena*);
template<> ::Protocol::C2SDeleteDoYanTao* Arena::CreateMaybeMessage<::Protocol::C2SDeleteDoYanTao>(Arena*);
template<> ::Protocol::C2SDeleteWeiWen* Arena::CreateMaybeMessage<::Protocol::C2SDeleteWeiWen>(Arena*);
template<> ::Protocol::C2SDeleteYanTao* Arena::CreateMaybeMessage<::Protocol::C2SDeleteYanTao>(Arena*);
template<> ::Protocol::C2SDepartment* Arena::CreateMaybeMessage<::Protocol::C2SDepartment>(Arena*);
template<> ::Protocol::C2SDoWeiWen* Arena::CreateMaybeMessage<::Protocol::C2SDoWeiWen>(Arena*);
template<> ::Protocol::C2SDoYanTao* Arena::CreateMaybeMessage<::Protocol::C2SDoYanTao>(Arena*);
template<> ::Protocol::C2SSearchDoWeiwen* Arena::CreateMaybeMessage<::Protocol::C2SSearchDoWeiwen>(Arena*);
template<> ::Protocol::C2SSearchDoYanTao* Arena::CreateMaybeMessage<::Protocol::C2SSearchDoYanTao>(Arena*);
template<> ::Protocol::C2SSearchWriteBook* Arena::CreateMaybeMessage<::Protocol::C2SSearchWriteBook>(Arena*);
template<> ::Protocol::C2SUpdateBooks* Arena::CreateMaybeMessage<::Protocol::C2SUpdateBooks>(Arena*);
template<> ::Protocol::C2SUpdateDepartment* Arena::CreateMaybeMessage<::Protocol::C2SUpdateDepartment>(Arena*);
template<> ::Protocol::C2SUpdateDoYanTao* Arena::CreateMaybeMessage<::Protocol::C2SUpdateDoYanTao>(Arena*);
template<> ::Protocol::C2SUpdateWeiWen* Arena::CreateMaybeMessage<::Protocol::C2SUpdateWeiWen>(Arena*);
template<> ::Protocol::C2SUpdateYanTao* Arena::CreateMaybeMessage<::Protocol::C2SUpdateYanTao>(Arena*);
template<> ::Protocol::C2SWeiWen* Arena::CreateMaybeMessage<::Protocol::C2SWeiWen>(Arena*);
template<> ::Protocol::C2SWriteBook* Arena::CreateMaybeMessage<::Protocol::C2SWriteBook>(Arena*);
template<> ::Protocol::C2SYanTao* Arena::CreateMaybeMessage<::Protocol::C2SYanTao>(Arena*);
template<> ::Protocol::Department* Arena::CreateMaybeMessage<::Protocol::Department>(Arena*);
template<> ::Protocol::DoWeiWen* Arena::CreateMaybeMessage<::Protocol::DoWeiWen>(Arena*);
template<> ::Protocol::DoYanTao* Arena::CreateMaybeMessage<::Protocol::DoYanTao>(Arena*);
template<> ::Protocol::S2CBook* Arena::CreateMaybeMessage<::Protocol::S2CBook>(Arena*);
template<> ::Protocol::S2CDepartment* Arena::CreateMaybeMessage<::Protocol::S2CDepartment>(Arena*);
template<> ::Protocol::S2CDoYanTao* Arena::CreateMaybeMessage<::Protocol::S2CDoYanTao>(Arena*);
template<> ::Protocol::S2CSearchDoWeiwen* Arena::CreateMaybeMessage<::Protocol::S2CSearchDoWeiwen>(Arena*);
template<> ::Protocol::S2CSearchDoYanTao* Arena::CreateMaybeMessage<::Protocol::S2CSearchDoYanTao>(Arena*);
template<> ::Protocol::S2CSearchWriteBook* Arena::CreateMaybeMessage<::Protocol::S2CSearchWriteBook>(Arena*);
template<> ::Protocol::S2CWeiWen* Arena::CreateMaybeMessage<::Protocol::S2CWeiWen>(Arena*);
template<> ::Protocol::S2CWriteBook* Arena::CreateMaybeMessage<::Protocol::S2CWriteBook>(Arena*);
template<> ::Protocol::S2CYanTao* Arena::CreateMaybeMessage<::Protocol::S2CYanTao>(Arena*);
template<> ::Protocol::S2cDoWeiWen* Arena::CreateMaybeMessage<::Protocol::S2cDoWeiWen>(Arena*);
template<> ::Protocol::UpdateBook* Arena::CreateMaybeMessage<::Protocol::UpdateBook>(Arena*);
template<> ::Protocol::UpdateDepartment* Arena::CreateMaybeMessage<::Protocol::UpdateDepartment>(Arena*);
template<> ::Protocol::UpdateDoYanTao* Arena::CreateMaybeMessage<::Protocol::UpdateDoYanTao>(Arena*);
template<> ::Protocol::UpdateWeiWen* Arena::CreateMaybeMessage<::Protocol::UpdateWeiWen>(Arena*);
template<> ::Protocol::UpdateYanTao* Arena::CreateMaybeMessage<::Protocol::UpdateYanTao>(Arena*);
template<> ::Protocol::WeiWen* Arena::CreateMaybeMessage<::Protocol::WeiWen>(Arena*);
template<> ::Protocol::WriteBook* Arena::CreateMaybeMessage<::Protocol::WriteBook>(Arena*);
template<> ::Protocol::YanTao* Arena::CreateMaybeMessage<::Protocol::YanTao>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class Department :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Department) */ {
 public:
  Department();
  virtual ~Department();

  Department(const Department& from);
  Department(Department&& from) noexcept
    : Department() {
    *this = ::std::move(from);
  }

  inline Department& operator=(const Department& from) {
    CopyFrom(from);
    return *this;
  }
  inline Department& operator=(Department&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Department& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Department* internal_default_instance() {
    return reinterpret_cast<const Department*>(
               &_Department_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Department& a, Department& b) {
    a.Swap(&b);
  }
  inline void Swap(Department* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Department* New() const final {
    return CreateMaybeMessage<Department>(nullptr);
  }

  Department* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Department>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Department& from);
  void MergeFrom(const Department& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Department* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Department";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kBMHFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string BMH = 2;
  void clear_bmh();
  const std::string& bmh() const;
  void set_bmh(const std::string& value);
  void set_bmh(std::string&& value);
  void set_bmh(const char* value);
  void set_bmh(const char* value, size_t size);
  std::string* mutable_bmh();
  std::string* release_bmh();
  void set_allocated_bmh(std::string* bmh);
  private:
  const std::string& _internal_bmh() const;
  void _internal_set_bmh(const std::string& value);
  std::string* _internal_mutable_bmh();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Department)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bmh_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class C2SDepartment :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2SDepartment) */ {
 public:
  C2SDepartment();
  virtual ~C2SDepartment();

  C2SDepartment(const C2SDepartment& from);
  C2SDepartment(C2SDepartment&& from) noexcept
    : C2SDepartment() {
    *this = ::std::move(from);
  }

  inline C2SDepartment& operator=(const C2SDepartment& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2SDepartment& operator=(C2SDepartment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2SDepartment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2SDepartment* internal_default_instance() {
    return reinterpret_cast<const C2SDepartment*>(
               &_C2SDepartment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(C2SDepartment& a, C2SDepartment& b) {
    a.Swap(&b);
  }
  inline void Swap(C2SDepartment* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2SDepartment* New() const final {
    return CreateMaybeMessage<C2SDepartment>(nullptr);
  }

  C2SDepartment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2SDepartment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2SDepartment& from);
  void MergeFrom(const C2SDepartment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SDepartment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2SDepartment";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
  };
  // int32 request = 1;
  void clear_request();
  ::PROTOBUF_NAMESPACE_ID::int32 request() const;
  void set_request(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_request() const;
  void _internal_set_request(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2SDepartment)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class S2CDepartment :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2CDepartment) */ {
 public:
  S2CDepartment();
  virtual ~S2CDepartment();

  S2CDepartment(const S2CDepartment& from);
  S2CDepartment(S2CDepartment&& from) noexcept
    : S2CDepartment() {
    *this = ::std::move(from);
  }

  inline S2CDepartment& operator=(const S2CDepartment& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2CDepartment& operator=(S2CDepartment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const S2CDepartment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2CDepartment* internal_default_instance() {
    return reinterpret_cast<const S2CDepartment*>(
               &_S2CDepartment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(S2CDepartment& a, S2CDepartment& b) {
    a.Swap(&b);
  }
  inline void Swap(S2CDepartment* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S2CDepartment* New() const final {
    return CreateMaybeMessage<S2CDepartment>(nullptr);
  }

  S2CDepartment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S2CDepartment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S2CDepartment& from);
  void MergeFrom(const S2CDepartment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2CDepartment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2CDepartment";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDepartmentListFieldNumber = 1,
  };
  // repeated .Protocol.Department departmentList = 1;
  int departmentlist_size() const;
  private:
  int _internal_departmentlist_size() const;
  public:
  void clear_departmentlist();
  ::Protocol::Department* mutable_departmentlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Department >*
      mutable_departmentlist();
  private:
  const ::Protocol::Department& _internal_departmentlist(int index) const;
  ::Protocol::Department* _internal_add_departmentlist();
  public:
  const ::Protocol::Department& departmentlist(int index) const;
  ::Protocol::Department* add_departmentlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Department >&
      departmentlist() const;

  // @@protoc_insertion_point(class_scope:Protocol.S2CDepartment)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Department > departmentlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class C2SAddDepartment :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2SAddDepartment) */ {
 public:
  C2SAddDepartment();
  virtual ~C2SAddDepartment();

  C2SAddDepartment(const C2SAddDepartment& from);
  C2SAddDepartment(C2SAddDepartment&& from) noexcept
    : C2SAddDepartment() {
    *this = ::std::move(from);
  }

  inline C2SAddDepartment& operator=(const C2SAddDepartment& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2SAddDepartment& operator=(C2SAddDepartment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2SAddDepartment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2SAddDepartment* internal_default_instance() {
    return reinterpret_cast<const C2SAddDepartment*>(
               &_C2SAddDepartment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(C2SAddDepartment& a, C2SAddDepartment& b) {
    a.Swap(&b);
  }
  inline void Swap(C2SAddDepartment* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2SAddDepartment* New() const final {
    return CreateMaybeMessage<C2SAddDepartment>(nullptr);
  }

  C2SAddDepartment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2SAddDepartment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2SAddDepartment& from);
  void MergeFrom(const C2SAddDepartment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SAddDepartment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2SAddDepartment";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDepartmentListFieldNumber = 1,
  };
  // repeated .Protocol.Department departmentList = 1;
  int departmentlist_size() const;
  private:
  int _internal_departmentlist_size() const;
  public:
  void clear_departmentlist();
  ::Protocol::Department* mutable_departmentlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Department >*
      mutable_departmentlist();
  private:
  const ::Protocol::Department& _internal_departmentlist(int index) const;
  ::Protocol::Department* _internal_add_departmentlist();
  public:
  const ::Protocol::Department& departmentlist(int index) const;
  ::Protocol::Department* add_departmentlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Department >&
      departmentlist() const;

  // @@protoc_insertion_point(class_scope:Protocol.C2SAddDepartment)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Department > departmentlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class UpdateDepartment :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.UpdateDepartment) */ {
 public:
  UpdateDepartment();
  virtual ~UpdateDepartment();

  UpdateDepartment(const UpdateDepartment& from);
  UpdateDepartment(UpdateDepartment&& from) noexcept
    : UpdateDepartment() {
    *this = ::std::move(from);
  }

  inline UpdateDepartment& operator=(const UpdateDepartment& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDepartment& operator=(UpdateDepartment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateDepartment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateDepartment* internal_default_instance() {
    return reinterpret_cast<const UpdateDepartment*>(
               &_UpdateDepartment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UpdateDepartment& a, UpdateDepartment& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateDepartment* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateDepartment* New() const final {
    return CreateMaybeMessage<UpdateDepartment>(nullptr);
  }

  UpdateDepartment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateDepartment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateDepartment& from);
  void MergeFrom(const UpdateDepartment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateDepartment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.UpdateDepartment";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldBHFieldNumber = 2,
    kDepartmentFieldNumber = 1,
  };
  // string oldBH = 2;
  void clear_oldbh();
  const std::string& oldbh() const;
  void set_oldbh(const std::string& value);
  void set_oldbh(std::string&& value);
  void set_oldbh(const char* value);
  void set_oldbh(const char* value, size_t size);
  std::string* mutable_oldbh();
  std::string* release_oldbh();
  void set_allocated_oldbh(std::string* oldbh);
  private:
  const std::string& _internal_oldbh() const;
  void _internal_set_oldbh(const std::string& value);
  std::string* _internal_mutable_oldbh();
  public:

  // .Protocol.Department department = 1;
  bool has_department() const;
  private:
  bool _internal_has_department() const;
  public:
  void clear_department();
  const ::Protocol::Department& department() const;
  ::Protocol::Department* release_department();
  ::Protocol::Department* mutable_department();
  void set_allocated_department(::Protocol::Department* department);
  private:
  const ::Protocol::Department& _internal_department() const;
  ::Protocol::Department* _internal_mutable_department();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.UpdateDepartment)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oldbh_;
  ::Protocol::Department* department_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class C2SUpdateDepartment :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2SUpdateDepartment) */ {
 public:
  C2SUpdateDepartment();
  virtual ~C2SUpdateDepartment();

  C2SUpdateDepartment(const C2SUpdateDepartment& from);
  C2SUpdateDepartment(C2SUpdateDepartment&& from) noexcept
    : C2SUpdateDepartment() {
    *this = ::std::move(from);
  }

  inline C2SUpdateDepartment& operator=(const C2SUpdateDepartment& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2SUpdateDepartment& operator=(C2SUpdateDepartment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2SUpdateDepartment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2SUpdateDepartment* internal_default_instance() {
    return reinterpret_cast<const C2SUpdateDepartment*>(
               &_C2SUpdateDepartment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(C2SUpdateDepartment& a, C2SUpdateDepartment& b) {
    a.Swap(&b);
  }
  inline void Swap(C2SUpdateDepartment* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2SUpdateDepartment* New() const final {
    return CreateMaybeMessage<C2SUpdateDepartment>(nullptr);
  }

  C2SUpdateDepartment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2SUpdateDepartment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2SUpdateDepartment& from);
  void MergeFrom(const C2SUpdateDepartment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SUpdateDepartment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2SUpdateDepartment";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDepartmentListFieldNumber = 1,
  };
  // repeated .Protocol.UpdateDepartment departmentList = 1;
  int departmentlist_size() const;
  private:
  int _internal_departmentlist_size() const;
  public:
  void clear_departmentlist();
  ::Protocol::UpdateDepartment* mutable_departmentlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UpdateDepartment >*
      mutable_departmentlist();
  private:
  const ::Protocol::UpdateDepartment& _internal_departmentlist(int index) const;
  ::Protocol::UpdateDepartment* _internal_add_departmentlist();
  public:
  const ::Protocol::UpdateDepartment& departmentlist(int index) const;
  ::Protocol::UpdateDepartment* add_departmentlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UpdateDepartment >&
      departmentlist() const;

  // @@protoc_insertion_point(class_scope:Protocol.C2SUpdateDepartment)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UpdateDepartment > departmentlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class C2SDeleteDepartment :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2SDeleteDepartment) */ {
 public:
  C2SDeleteDepartment();
  virtual ~C2SDeleteDepartment();

  C2SDeleteDepartment(const C2SDeleteDepartment& from);
  C2SDeleteDepartment(C2SDeleteDepartment&& from) noexcept
    : C2SDeleteDepartment() {
    *this = ::std::move(from);
  }

  inline C2SDeleteDepartment& operator=(const C2SDeleteDepartment& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2SDeleteDepartment& operator=(C2SDeleteDepartment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2SDeleteDepartment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2SDeleteDepartment* internal_default_instance() {
    return reinterpret_cast<const C2SDeleteDepartment*>(
               &_C2SDeleteDepartment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(C2SDeleteDepartment& a, C2SDeleteDepartment& b) {
    a.Swap(&b);
  }
  inline void Swap(C2SDeleteDepartment* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2SDeleteDepartment* New() const final {
    return CreateMaybeMessage<C2SDeleteDepartment>(nullptr);
  }

  C2SDeleteDepartment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2SDeleteDepartment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2SDeleteDepartment& from);
  void MergeFrom(const C2SDeleteDepartment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SDeleteDepartment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2SDeleteDepartment";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBhListFieldNumber = 1,
  };
  // repeated string bhList = 1;
  int bhlist_size() const;
  private:
  int _internal_bhlist_size() const;
  public:
  void clear_bhlist();
  const std::string& bhlist(int index) const;
  std::string* mutable_bhlist(int index);
  void set_bhlist(int index, const std::string& value);
  void set_bhlist(int index, std::string&& value);
  void set_bhlist(int index, const char* value);
  void set_bhlist(int index, const char* value, size_t size);
  std::string* add_bhlist();
  void add_bhlist(const std::string& value);
  void add_bhlist(std::string&& value);
  void add_bhlist(const char* value);
  void add_bhlist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& bhlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_bhlist();
  private:
  const std::string& _internal_bhlist(int index) const;
  std::string* _internal_add_bhlist();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2SDeleteDepartment)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> bhlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class Book :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Book) */ {
 public:
  Book();
  virtual ~Book();

  Book(const Book& from);
  Book(Book&& from) noexcept
    : Book() {
    *this = ::std::move(from);
  }

  inline Book& operator=(const Book& from) {
    CopyFrom(from);
    return *this;
  }
  inline Book& operator=(Book&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Book& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Book* internal_default_instance() {
    return reinterpret_cast<const Book*>(
               &_Book_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Book& a, Book& b) {
    a.Swap(&b);
  }
  inline void Swap(Book* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Book* New() const final {
    return CreateMaybeMessage<Book>(nullptr);
  }

  Book* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Book>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Book& from);
  void MergeFrom(const Book& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Book* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Book";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTimeFieldNumber = 2,
    kBHFieldNumber = 3,
    kPriceFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string time = 2;
  void clear_time();
  const std::string& time() const;
  void set_time(const std::string& value);
  void set_time(std::string&& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  std::string* mutable_time();
  std::string* release_time();
  void set_allocated_time(std::string* time);
  private:
  const std::string& _internal_time() const;
  void _internal_set_time(const std::string& value);
  std::string* _internal_mutable_time();
  public:

  // string BH = 3;
  void clear_bh();
  const std::string& bh() const;
  void set_bh(const std::string& value);
  void set_bh(std::string&& value);
  void set_bh(const char* value);
  void set_bh(const char* value, size_t size);
  std::string* mutable_bh();
  std::string* release_bh();
  void set_allocated_bh(std::string* bh);
  private:
  const std::string& _internal_bh() const;
  void _internal_set_bh(const std::string& value);
  std::string* _internal_mutable_bh();
  public:

  // float price = 4;
  void clear_price();
  float price() const;
  void set_price(float value);
  private:
  float _internal_price() const;
  void _internal_set_price(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Book)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bh_;
  float price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class C2SBook :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2SBook) */ {
 public:
  C2SBook();
  virtual ~C2SBook();

  C2SBook(const C2SBook& from);
  C2SBook(C2SBook&& from) noexcept
    : C2SBook() {
    *this = ::std::move(from);
  }

  inline C2SBook& operator=(const C2SBook& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2SBook& operator=(C2SBook&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2SBook& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2SBook* internal_default_instance() {
    return reinterpret_cast<const C2SBook*>(
               &_C2SBook_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(C2SBook& a, C2SBook& b) {
    a.Swap(&b);
  }
  inline void Swap(C2SBook* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2SBook* New() const final {
    return CreateMaybeMessage<C2SBook>(nullptr);
  }

  C2SBook* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2SBook>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2SBook& from);
  void MergeFrom(const C2SBook& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SBook* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2SBook";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
  };
  // int32 request = 1;
  void clear_request();
  ::PROTOBUF_NAMESPACE_ID::int32 request() const;
  void set_request(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_request() const;
  void _internal_set_request(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2SBook)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class S2CBook :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2CBook) */ {
 public:
  S2CBook();
  virtual ~S2CBook();

  S2CBook(const S2CBook& from);
  S2CBook(S2CBook&& from) noexcept
    : S2CBook() {
    *this = ::std::move(from);
  }

  inline S2CBook& operator=(const S2CBook& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2CBook& operator=(S2CBook&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const S2CBook& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2CBook* internal_default_instance() {
    return reinterpret_cast<const S2CBook*>(
               &_S2CBook_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(S2CBook& a, S2CBook& b) {
    a.Swap(&b);
  }
  inline void Swap(S2CBook* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S2CBook* New() const final {
    return CreateMaybeMessage<S2CBook>(nullptr);
  }

  S2CBook* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S2CBook>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S2CBook& from);
  void MergeFrom(const S2CBook& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2CBook* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2CBook";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBookListFieldNumber = 1,
  };
  // repeated .Protocol.Book bookList = 1;
  int booklist_size() const;
  private:
  int _internal_booklist_size() const;
  public:
  void clear_booklist();
  ::Protocol::Book* mutable_booklist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Book >*
      mutable_booklist();
  private:
  const ::Protocol::Book& _internal_booklist(int index) const;
  ::Protocol::Book* _internal_add_booklist();
  public:
  const ::Protocol::Book& booklist(int index) const;
  ::Protocol::Book* add_booklist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Book >&
      booklist() const;

  // @@protoc_insertion_point(class_scope:Protocol.S2CBook)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Book > booklist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class C2SAddBooks :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2SAddBooks) */ {
 public:
  C2SAddBooks();
  virtual ~C2SAddBooks();

  C2SAddBooks(const C2SAddBooks& from);
  C2SAddBooks(C2SAddBooks&& from) noexcept
    : C2SAddBooks() {
    *this = ::std::move(from);
  }

  inline C2SAddBooks& operator=(const C2SAddBooks& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2SAddBooks& operator=(C2SAddBooks&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2SAddBooks& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2SAddBooks* internal_default_instance() {
    return reinterpret_cast<const C2SAddBooks*>(
               &_C2SAddBooks_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(C2SAddBooks& a, C2SAddBooks& b) {
    a.Swap(&b);
  }
  inline void Swap(C2SAddBooks* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2SAddBooks* New() const final {
    return CreateMaybeMessage<C2SAddBooks>(nullptr);
  }

  C2SAddBooks* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2SAddBooks>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2SAddBooks& from);
  void MergeFrom(const C2SAddBooks& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SAddBooks* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2SAddBooks";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBookListFieldNumber = 1,
  };
  // repeated .Protocol.Book bookList = 1;
  int booklist_size() const;
  private:
  int _internal_booklist_size() const;
  public:
  void clear_booklist();
  ::Protocol::Book* mutable_booklist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Book >*
      mutable_booklist();
  private:
  const ::Protocol::Book& _internal_booklist(int index) const;
  ::Protocol::Book* _internal_add_booklist();
  public:
  const ::Protocol::Book& booklist(int index) const;
  ::Protocol::Book* add_booklist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Book >&
      booklist() const;

  // @@protoc_insertion_point(class_scope:Protocol.C2SAddBooks)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Book > booklist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class C2SDeleteBooks :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2SDeleteBooks) */ {
 public:
  C2SDeleteBooks();
  virtual ~C2SDeleteBooks();

  C2SDeleteBooks(const C2SDeleteBooks& from);
  C2SDeleteBooks(C2SDeleteBooks&& from) noexcept
    : C2SDeleteBooks() {
    *this = ::std::move(from);
  }

  inline C2SDeleteBooks& operator=(const C2SDeleteBooks& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2SDeleteBooks& operator=(C2SDeleteBooks&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2SDeleteBooks& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2SDeleteBooks* internal_default_instance() {
    return reinterpret_cast<const C2SDeleteBooks*>(
               &_C2SDeleteBooks_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(C2SDeleteBooks& a, C2SDeleteBooks& b) {
    a.Swap(&b);
  }
  inline void Swap(C2SDeleteBooks* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2SDeleteBooks* New() const final {
    return CreateMaybeMessage<C2SDeleteBooks>(nullptr);
  }

  C2SDeleteBooks* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2SDeleteBooks>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2SDeleteBooks& from);
  void MergeFrom(const C2SDeleteBooks& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SDeleteBooks* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2SDeleteBooks";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBhListFieldNumber = 1,
  };
  // repeated string bhList = 1;
  int bhlist_size() const;
  private:
  int _internal_bhlist_size() const;
  public:
  void clear_bhlist();
  const std::string& bhlist(int index) const;
  std::string* mutable_bhlist(int index);
  void set_bhlist(int index, const std::string& value);
  void set_bhlist(int index, std::string&& value);
  void set_bhlist(int index, const char* value);
  void set_bhlist(int index, const char* value, size_t size);
  std::string* add_bhlist();
  void add_bhlist(const std::string& value);
  void add_bhlist(std::string&& value);
  void add_bhlist(const char* value);
  void add_bhlist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& bhlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_bhlist();
  private:
  const std::string& _internal_bhlist(int index) const;
  std::string* _internal_add_bhlist();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2SDeleteBooks)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> bhlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class UpdateBook :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.UpdateBook) */ {
 public:
  UpdateBook();
  virtual ~UpdateBook();

  UpdateBook(const UpdateBook& from);
  UpdateBook(UpdateBook&& from) noexcept
    : UpdateBook() {
    *this = ::std::move(from);
  }

  inline UpdateBook& operator=(const UpdateBook& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateBook& operator=(UpdateBook&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateBook& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateBook* internal_default_instance() {
    return reinterpret_cast<const UpdateBook*>(
               &_UpdateBook_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(UpdateBook& a, UpdateBook& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateBook* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateBook* New() const final {
    return CreateMaybeMessage<UpdateBook>(nullptr);
  }

  UpdateBook* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateBook>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateBook& from);
  void MergeFrom(const UpdateBook& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateBook* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.UpdateBook";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldBHFieldNumber = 1,
    kBookFieldNumber = 2,
  };
  // string oldBH = 1;
  void clear_oldbh();
  const std::string& oldbh() const;
  void set_oldbh(const std::string& value);
  void set_oldbh(std::string&& value);
  void set_oldbh(const char* value);
  void set_oldbh(const char* value, size_t size);
  std::string* mutable_oldbh();
  std::string* release_oldbh();
  void set_allocated_oldbh(std::string* oldbh);
  private:
  const std::string& _internal_oldbh() const;
  void _internal_set_oldbh(const std::string& value);
  std::string* _internal_mutable_oldbh();
  public:

  // .Protocol.Book book = 2;
  bool has_book() const;
  private:
  bool _internal_has_book() const;
  public:
  void clear_book();
  const ::Protocol::Book& book() const;
  ::Protocol::Book* release_book();
  ::Protocol::Book* mutable_book();
  void set_allocated_book(::Protocol::Book* book);
  private:
  const ::Protocol::Book& _internal_book() const;
  ::Protocol::Book* _internal_mutable_book();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.UpdateBook)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oldbh_;
  ::Protocol::Book* book_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class C2SUpdateBooks :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2SUpdateBooks) */ {
 public:
  C2SUpdateBooks();
  virtual ~C2SUpdateBooks();

  C2SUpdateBooks(const C2SUpdateBooks& from);
  C2SUpdateBooks(C2SUpdateBooks&& from) noexcept
    : C2SUpdateBooks() {
    *this = ::std::move(from);
  }

  inline C2SUpdateBooks& operator=(const C2SUpdateBooks& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2SUpdateBooks& operator=(C2SUpdateBooks&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2SUpdateBooks& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2SUpdateBooks* internal_default_instance() {
    return reinterpret_cast<const C2SUpdateBooks*>(
               &_C2SUpdateBooks_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(C2SUpdateBooks& a, C2SUpdateBooks& b) {
    a.Swap(&b);
  }
  inline void Swap(C2SUpdateBooks* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2SUpdateBooks* New() const final {
    return CreateMaybeMessage<C2SUpdateBooks>(nullptr);
  }

  C2SUpdateBooks* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2SUpdateBooks>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2SUpdateBooks& from);
  void MergeFrom(const C2SUpdateBooks& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SUpdateBooks* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2SUpdateBooks";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBookListFieldNumber = 1,
  };
  // repeated .Protocol.UpdateBook bookList = 1;
  int booklist_size() const;
  private:
  int _internal_booklist_size() const;
  public:
  void clear_booklist();
  ::Protocol::UpdateBook* mutable_booklist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UpdateBook >*
      mutable_booklist();
  private:
  const ::Protocol::UpdateBook& _internal_booklist(int index) const;
  ::Protocol::UpdateBook* _internal_add_booklist();
  public:
  const ::Protocol::UpdateBook& booklist(int index) const;
  ::Protocol::UpdateBook* add_booklist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UpdateBook >&
      booklist() const;

  // @@protoc_insertion_point(class_scope:Protocol.C2SUpdateBooks)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UpdateBook > booklist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class YanTao :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.YanTao) */ {
 public:
  YanTao();
  virtual ~YanTao();

  YanTao(const YanTao& from);
  YanTao(YanTao&& from) noexcept
    : YanTao() {
    *this = ::std::move(from);
  }

  inline YanTao& operator=(const YanTao& from) {
    CopyFrom(from);
    return *this;
  }
  inline YanTao& operator=(YanTao&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const YanTao& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const YanTao* internal_default_instance() {
    return reinterpret_cast<const YanTao*>(
               &_YanTao_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(YanTao& a, YanTao& b) {
    a.Swap(&b);
  }
  inline void Swap(YanTao* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline YanTao* New() const final {
    return CreateMaybeMessage<YanTao>(nullptr);
  }

  YanTao* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<YanTao>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const YanTao& from);
  void MergeFrom(const YanTao& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(YanTao* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.YanTao";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kContentFieldNumber = 2,
    kTimeFieldNumber = 3,
    kAddressFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string content = 2;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string time = 3;
  void clear_time();
  const std::string& time() const;
  void set_time(const std::string& value);
  void set_time(std::string&& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  std::string* mutable_time();
  std::string* release_time();
  void set_allocated_time(std::string* time);
  private:
  const std::string& _internal_time() const;
  void _internal_set_time(const std::string& value);
  std::string* _internal_mutable_time();
  public:

  // string address = 4;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.YanTao)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class C2SYanTao :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2SYanTao) */ {
 public:
  C2SYanTao();
  virtual ~C2SYanTao();

  C2SYanTao(const C2SYanTao& from);
  C2SYanTao(C2SYanTao&& from) noexcept
    : C2SYanTao() {
    *this = ::std::move(from);
  }

  inline C2SYanTao& operator=(const C2SYanTao& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2SYanTao& operator=(C2SYanTao&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2SYanTao& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2SYanTao* internal_default_instance() {
    return reinterpret_cast<const C2SYanTao*>(
               &_C2SYanTao_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(C2SYanTao& a, C2SYanTao& b) {
    a.Swap(&b);
  }
  inline void Swap(C2SYanTao* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2SYanTao* New() const final {
    return CreateMaybeMessage<C2SYanTao>(nullptr);
  }

  C2SYanTao* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2SYanTao>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2SYanTao& from);
  void MergeFrom(const C2SYanTao& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SYanTao* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2SYanTao";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
  };
  // int32 request = 1;
  void clear_request();
  ::PROTOBUF_NAMESPACE_ID::int32 request() const;
  void set_request(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_request() const;
  void _internal_set_request(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2SYanTao)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class S2CYanTao :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2CYanTao) */ {
 public:
  S2CYanTao();
  virtual ~S2CYanTao();

  S2CYanTao(const S2CYanTao& from);
  S2CYanTao(S2CYanTao&& from) noexcept
    : S2CYanTao() {
    *this = ::std::move(from);
  }

  inline S2CYanTao& operator=(const S2CYanTao& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2CYanTao& operator=(S2CYanTao&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const S2CYanTao& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2CYanTao* internal_default_instance() {
    return reinterpret_cast<const S2CYanTao*>(
               &_S2CYanTao_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(S2CYanTao& a, S2CYanTao& b) {
    a.Swap(&b);
  }
  inline void Swap(S2CYanTao* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S2CYanTao* New() const final {
    return CreateMaybeMessage<S2CYanTao>(nullptr);
  }

  S2CYanTao* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S2CYanTao>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S2CYanTao& from);
  void MergeFrom(const S2CYanTao& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2CYanTao* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2CYanTao";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYanTaoListFieldNumber = 1,
  };
  // repeated .Protocol.YanTao yanTaoList = 1;
  int yantaolist_size() const;
  private:
  int _internal_yantaolist_size() const;
  public:
  void clear_yantaolist();
  ::Protocol::YanTao* mutable_yantaolist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::YanTao >*
      mutable_yantaolist();
  private:
  const ::Protocol::YanTao& _internal_yantaolist(int index) const;
  ::Protocol::YanTao* _internal_add_yantaolist();
  public:
  const ::Protocol::YanTao& yantaolist(int index) const;
  ::Protocol::YanTao* add_yantaolist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::YanTao >&
      yantaolist() const;

  // @@protoc_insertion_point(class_scope:Protocol.S2CYanTao)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::YanTao > yantaolist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class C2SAddYanTao :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2SAddYanTao) */ {
 public:
  C2SAddYanTao();
  virtual ~C2SAddYanTao();

  C2SAddYanTao(const C2SAddYanTao& from);
  C2SAddYanTao(C2SAddYanTao&& from) noexcept
    : C2SAddYanTao() {
    *this = ::std::move(from);
  }

  inline C2SAddYanTao& operator=(const C2SAddYanTao& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2SAddYanTao& operator=(C2SAddYanTao&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2SAddYanTao& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2SAddYanTao* internal_default_instance() {
    return reinterpret_cast<const C2SAddYanTao*>(
               &_C2SAddYanTao_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(C2SAddYanTao& a, C2SAddYanTao& b) {
    a.Swap(&b);
  }
  inline void Swap(C2SAddYanTao* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2SAddYanTao* New() const final {
    return CreateMaybeMessage<C2SAddYanTao>(nullptr);
  }

  C2SAddYanTao* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2SAddYanTao>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2SAddYanTao& from);
  void MergeFrom(const C2SAddYanTao& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SAddYanTao* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2SAddYanTao";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYanTaoListFieldNumber = 1,
  };
  // repeated .Protocol.YanTao yanTaoList = 1;
  int yantaolist_size() const;
  private:
  int _internal_yantaolist_size() const;
  public:
  void clear_yantaolist();
  ::Protocol::YanTao* mutable_yantaolist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::YanTao >*
      mutable_yantaolist();
  private:
  const ::Protocol::YanTao& _internal_yantaolist(int index) const;
  ::Protocol::YanTao* _internal_add_yantaolist();
  public:
  const ::Protocol::YanTao& yantaolist(int index) const;
  ::Protocol::YanTao* add_yantaolist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::YanTao >&
      yantaolist() const;

  // @@protoc_insertion_point(class_scope:Protocol.C2SAddYanTao)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::YanTao > yantaolist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class UpdateYanTao :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.UpdateYanTao) */ {
 public:
  UpdateYanTao();
  virtual ~UpdateYanTao();

  UpdateYanTao(const UpdateYanTao& from);
  UpdateYanTao(UpdateYanTao&& from) noexcept
    : UpdateYanTao() {
    *this = ::std::move(from);
  }

  inline UpdateYanTao& operator=(const UpdateYanTao& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateYanTao& operator=(UpdateYanTao&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateYanTao& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateYanTao* internal_default_instance() {
    return reinterpret_cast<const UpdateYanTao*>(
               &_UpdateYanTao_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(UpdateYanTao& a, UpdateYanTao& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateYanTao* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateYanTao* New() const final {
    return CreateMaybeMessage<UpdateYanTao>(nullptr);
  }

  UpdateYanTao* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateYanTao>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateYanTao& from);
  void MergeFrom(const UpdateYanTao& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateYanTao* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.UpdateYanTao";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldNameFieldNumber = 2,
    kYantaoFieldNumber = 1,
  };
  // string oldName = 2;
  void clear_oldname();
  const std::string& oldname() const;
  void set_oldname(const std::string& value);
  void set_oldname(std::string&& value);
  void set_oldname(const char* value);
  void set_oldname(const char* value, size_t size);
  std::string* mutable_oldname();
  std::string* release_oldname();
  void set_allocated_oldname(std::string* oldname);
  private:
  const std::string& _internal_oldname() const;
  void _internal_set_oldname(const std::string& value);
  std::string* _internal_mutable_oldname();
  public:

  // .Protocol.YanTao yantao = 1;
  bool has_yantao() const;
  private:
  bool _internal_has_yantao() const;
  public:
  void clear_yantao();
  const ::Protocol::YanTao& yantao() const;
  ::Protocol::YanTao* release_yantao();
  ::Protocol::YanTao* mutable_yantao();
  void set_allocated_yantao(::Protocol::YanTao* yantao);
  private:
  const ::Protocol::YanTao& _internal_yantao() const;
  ::Protocol::YanTao* _internal_mutable_yantao();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.UpdateYanTao)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oldname_;
  ::Protocol::YanTao* yantao_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class C2SUpdateYanTao :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2SUpdateYanTao) */ {
 public:
  C2SUpdateYanTao();
  virtual ~C2SUpdateYanTao();

  C2SUpdateYanTao(const C2SUpdateYanTao& from);
  C2SUpdateYanTao(C2SUpdateYanTao&& from) noexcept
    : C2SUpdateYanTao() {
    *this = ::std::move(from);
  }

  inline C2SUpdateYanTao& operator=(const C2SUpdateYanTao& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2SUpdateYanTao& operator=(C2SUpdateYanTao&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2SUpdateYanTao& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2SUpdateYanTao* internal_default_instance() {
    return reinterpret_cast<const C2SUpdateYanTao*>(
               &_C2SUpdateYanTao_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(C2SUpdateYanTao& a, C2SUpdateYanTao& b) {
    a.Swap(&b);
  }
  inline void Swap(C2SUpdateYanTao* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2SUpdateYanTao* New() const final {
    return CreateMaybeMessage<C2SUpdateYanTao>(nullptr);
  }

  C2SUpdateYanTao* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2SUpdateYanTao>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2SUpdateYanTao& from);
  void MergeFrom(const C2SUpdateYanTao& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SUpdateYanTao* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2SUpdateYanTao";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYanTaoListFieldNumber = 1,
  };
  // repeated .Protocol.UpdateYanTao yanTaoList = 1;
  int yantaolist_size() const;
  private:
  int _internal_yantaolist_size() const;
  public:
  void clear_yantaolist();
  ::Protocol::UpdateYanTao* mutable_yantaolist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UpdateYanTao >*
      mutable_yantaolist();
  private:
  const ::Protocol::UpdateYanTao& _internal_yantaolist(int index) const;
  ::Protocol::UpdateYanTao* _internal_add_yantaolist();
  public:
  const ::Protocol::UpdateYanTao& yantaolist(int index) const;
  ::Protocol::UpdateYanTao* add_yantaolist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UpdateYanTao >&
      yantaolist() const;

  // @@protoc_insertion_point(class_scope:Protocol.C2SUpdateYanTao)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UpdateYanTao > yantaolist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class C2SDeleteYanTao :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2SDeleteYanTao) */ {
 public:
  C2SDeleteYanTao();
  virtual ~C2SDeleteYanTao();

  C2SDeleteYanTao(const C2SDeleteYanTao& from);
  C2SDeleteYanTao(C2SDeleteYanTao&& from) noexcept
    : C2SDeleteYanTao() {
    *this = ::std::move(from);
  }

  inline C2SDeleteYanTao& operator=(const C2SDeleteYanTao& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2SDeleteYanTao& operator=(C2SDeleteYanTao&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2SDeleteYanTao& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2SDeleteYanTao* internal_default_instance() {
    return reinterpret_cast<const C2SDeleteYanTao*>(
               &_C2SDeleteYanTao_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(C2SDeleteYanTao& a, C2SDeleteYanTao& b) {
    a.Swap(&b);
  }
  inline void Swap(C2SDeleteYanTao* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2SDeleteYanTao* New() const final {
    return CreateMaybeMessage<C2SDeleteYanTao>(nullptr);
  }

  C2SDeleteYanTao* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2SDeleteYanTao>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2SDeleteYanTao& from);
  void MergeFrom(const C2SDeleteYanTao& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SDeleteYanTao* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2SDeleteYanTao";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // repeated string name = 1;
  int name_size() const;
  private:
  int _internal_name_size() const;
  public:
  void clear_name();
  const std::string& name(int index) const;
  std::string* mutable_name(int index);
  void set_name(int index, const std::string& value);
  void set_name(int index, std::string&& value);
  void set_name(int index, const char* value);
  void set_name(int index, const char* value, size_t size);
  std::string* add_name();
  void add_name(const std::string& value);
  void add_name(std::string&& value);
  void add_name(const char* value);
  void add_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name();
  private:
  const std::string& _internal_name(int index) const;
  std::string* _internal_add_name();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2SDeleteYanTao)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class WeiWen :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.WeiWen) */ {
 public:
  WeiWen();
  virtual ~WeiWen();

  WeiWen(const WeiWen& from);
  WeiWen(WeiWen&& from) noexcept
    : WeiWen() {
    *this = ::std::move(from);
  }

  inline WeiWen& operator=(const WeiWen& from) {
    CopyFrom(from);
    return *this;
  }
  inline WeiWen& operator=(WeiWen&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WeiWen& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WeiWen* internal_default_instance() {
    return reinterpret_cast<const WeiWen*>(
               &_WeiWen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(WeiWen& a, WeiWen& b) {
    a.Swap(&b);
  }
  inline void Swap(WeiWen* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WeiWen* New() const final {
    return CreateMaybeMessage<WeiWen>(nullptr);
  }

  WeiWen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WeiWen>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WeiWen& from);
  void MergeFrom(const WeiWen& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WeiWen* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.WeiWen";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTimeFieldNumber = 2,
    kAddressFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string time = 2;
  void clear_time();
  const std::string& time() const;
  void set_time(const std::string& value);
  void set_time(std::string&& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  std::string* mutable_time();
  std::string* release_time();
  void set_allocated_time(std::string* time);
  private:
  const std::string& _internal_time() const;
  void _internal_set_time(const std::string& value);
  std::string* _internal_mutable_time();
  public:

  // string address = 3;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.WeiWen)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class C2SWeiWen :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2SWeiWen) */ {
 public:
  C2SWeiWen();
  virtual ~C2SWeiWen();

  C2SWeiWen(const C2SWeiWen& from);
  C2SWeiWen(C2SWeiWen&& from) noexcept
    : C2SWeiWen() {
    *this = ::std::move(from);
  }

  inline C2SWeiWen& operator=(const C2SWeiWen& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2SWeiWen& operator=(C2SWeiWen&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2SWeiWen& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2SWeiWen* internal_default_instance() {
    return reinterpret_cast<const C2SWeiWen*>(
               &_C2SWeiWen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(C2SWeiWen& a, C2SWeiWen& b) {
    a.Swap(&b);
  }
  inline void Swap(C2SWeiWen* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2SWeiWen* New() const final {
    return CreateMaybeMessage<C2SWeiWen>(nullptr);
  }

  C2SWeiWen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2SWeiWen>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2SWeiWen& from);
  void MergeFrom(const C2SWeiWen& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SWeiWen* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2SWeiWen";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
  };
  // int32 request = 1;
  void clear_request();
  ::PROTOBUF_NAMESPACE_ID::int32 request() const;
  void set_request(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_request() const;
  void _internal_set_request(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2SWeiWen)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class S2CWeiWen :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2CWeiWen) */ {
 public:
  S2CWeiWen();
  virtual ~S2CWeiWen();

  S2CWeiWen(const S2CWeiWen& from);
  S2CWeiWen(S2CWeiWen&& from) noexcept
    : S2CWeiWen() {
    *this = ::std::move(from);
  }

  inline S2CWeiWen& operator=(const S2CWeiWen& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2CWeiWen& operator=(S2CWeiWen&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const S2CWeiWen& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2CWeiWen* internal_default_instance() {
    return reinterpret_cast<const S2CWeiWen*>(
               &_S2CWeiWen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(S2CWeiWen& a, S2CWeiWen& b) {
    a.Swap(&b);
  }
  inline void Swap(S2CWeiWen* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S2CWeiWen* New() const final {
    return CreateMaybeMessage<S2CWeiWen>(nullptr);
  }

  S2CWeiWen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S2CWeiWen>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S2CWeiWen& from);
  void MergeFrom(const S2CWeiWen& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2CWeiWen* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2CWeiWen";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeiWenListFieldNumber = 1,
  };
  // repeated .Protocol.WeiWen weiWenList = 1;
  int weiwenlist_size() const;
  private:
  int _internal_weiwenlist_size() const;
  public:
  void clear_weiwenlist();
  ::Protocol::WeiWen* mutable_weiwenlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::WeiWen >*
      mutable_weiwenlist();
  private:
  const ::Protocol::WeiWen& _internal_weiwenlist(int index) const;
  ::Protocol::WeiWen* _internal_add_weiwenlist();
  public:
  const ::Protocol::WeiWen& weiwenlist(int index) const;
  ::Protocol::WeiWen* add_weiwenlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::WeiWen >&
      weiwenlist() const;

  // @@protoc_insertion_point(class_scope:Protocol.S2CWeiWen)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::WeiWen > weiwenlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class C2SAddWeiWen :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2SAddWeiWen) */ {
 public:
  C2SAddWeiWen();
  virtual ~C2SAddWeiWen();

  C2SAddWeiWen(const C2SAddWeiWen& from);
  C2SAddWeiWen(C2SAddWeiWen&& from) noexcept
    : C2SAddWeiWen() {
    *this = ::std::move(from);
  }

  inline C2SAddWeiWen& operator=(const C2SAddWeiWen& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2SAddWeiWen& operator=(C2SAddWeiWen&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2SAddWeiWen& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2SAddWeiWen* internal_default_instance() {
    return reinterpret_cast<const C2SAddWeiWen*>(
               &_C2SAddWeiWen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(C2SAddWeiWen& a, C2SAddWeiWen& b) {
    a.Swap(&b);
  }
  inline void Swap(C2SAddWeiWen* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2SAddWeiWen* New() const final {
    return CreateMaybeMessage<C2SAddWeiWen>(nullptr);
  }

  C2SAddWeiWen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2SAddWeiWen>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2SAddWeiWen& from);
  void MergeFrom(const C2SAddWeiWen& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SAddWeiWen* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2SAddWeiWen";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeiWenListFieldNumber = 1,
  };
  // repeated .Protocol.WeiWen weiWenList = 1;
  int weiwenlist_size() const;
  private:
  int _internal_weiwenlist_size() const;
  public:
  void clear_weiwenlist();
  ::Protocol::WeiWen* mutable_weiwenlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::WeiWen >*
      mutable_weiwenlist();
  private:
  const ::Protocol::WeiWen& _internal_weiwenlist(int index) const;
  ::Protocol::WeiWen* _internal_add_weiwenlist();
  public:
  const ::Protocol::WeiWen& weiwenlist(int index) const;
  ::Protocol::WeiWen* add_weiwenlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::WeiWen >&
      weiwenlist() const;

  // @@protoc_insertion_point(class_scope:Protocol.C2SAddWeiWen)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::WeiWen > weiwenlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class UpdateWeiWen :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.UpdateWeiWen) */ {
 public:
  UpdateWeiWen();
  virtual ~UpdateWeiWen();

  UpdateWeiWen(const UpdateWeiWen& from);
  UpdateWeiWen(UpdateWeiWen&& from) noexcept
    : UpdateWeiWen() {
    *this = ::std::move(from);
  }

  inline UpdateWeiWen& operator=(const UpdateWeiWen& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateWeiWen& operator=(UpdateWeiWen&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateWeiWen& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateWeiWen* internal_default_instance() {
    return reinterpret_cast<const UpdateWeiWen*>(
               &_UpdateWeiWen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(UpdateWeiWen& a, UpdateWeiWen& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateWeiWen* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateWeiWen* New() const final {
    return CreateMaybeMessage<UpdateWeiWen>(nullptr);
  }

  UpdateWeiWen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateWeiWen>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateWeiWen& from);
  void MergeFrom(const UpdateWeiWen& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateWeiWen* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.UpdateWeiWen";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldNameFieldNumber = 2,
    kWeiwenFieldNumber = 1,
  };
  // string oldName = 2;
  void clear_oldname();
  const std::string& oldname() const;
  void set_oldname(const std::string& value);
  void set_oldname(std::string&& value);
  void set_oldname(const char* value);
  void set_oldname(const char* value, size_t size);
  std::string* mutable_oldname();
  std::string* release_oldname();
  void set_allocated_oldname(std::string* oldname);
  private:
  const std::string& _internal_oldname() const;
  void _internal_set_oldname(const std::string& value);
  std::string* _internal_mutable_oldname();
  public:

  // .Protocol.WeiWen weiwen = 1;
  bool has_weiwen() const;
  private:
  bool _internal_has_weiwen() const;
  public:
  void clear_weiwen();
  const ::Protocol::WeiWen& weiwen() const;
  ::Protocol::WeiWen* release_weiwen();
  ::Protocol::WeiWen* mutable_weiwen();
  void set_allocated_weiwen(::Protocol::WeiWen* weiwen);
  private:
  const ::Protocol::WeiWen& _internal_weiwen() const;
  ::Protocol::WeiWen* _internal_mutable_weiwen();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.UpdateWeiWen)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oldname_;
  ::Protocol::WeiWen* weiwen_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class C2SUpdateWeiWen :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2SUpdateWeiWen) */ {
 public:
  C2SUpdateWeiWen();
  virtual ~C2SUpdateWeiWen();

  C2SUpdateWeiWen(const C2SUpdateWeiWen& from);
  C2SUpdateWeiWen(C2SUpdateWeiWen&& from) noexcept
    : C2SUpdateWeiWen() {
    *this = ::std::move(from);
  }

  inline C2SUpdateWeiWen& operator=(const C2SUpdateWeiWen& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2SUpdateWeiWen& operator=(C2SUpdateWeiWen&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2SUpdateWeiWen& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2SUpdateWeiWen* internal_default_instance() {
    return reinterpret_cast<const C2SUpdateWeiWen*>(
               &_C2SUpdateWeiWen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(C2SUpdateWeiWen& a, C2SUpdateWeiWen& b) {
    a.Swap(&b);
  }
  inline void Swap(C2SUpdateWeiWen* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2SUpdateWeiWen* New() const final {
    return CreateMaybeMessage<C2SUpdateWeiWen>(nullptr);
  }

  C2SUpdateWeiWen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2SUpdateWeiWen>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2SUpdateWeiWen& from);
  void MergeFrom(const C2SUpdateWeiWen& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SUpdateWeiWen* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2SUpdateWeiWen";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeiWenListFieldNumber = 1,
  };
  // repeated .Protocol.UpdateWeiWen weiWenList = 1;
  int weiwenlist_size() const;
  private:
  int _internal_weiwenlist_size() const;
  public:
  void clear_weiwenlist();
  ::Protocol::UpdateWeiWen* mutable_weiwenlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UpdateWeiWen >*
      mutable_weiwenlist();
  private:
  const ::Protocol::UpdateWeiWen& _internal_weiwenlist(int index) const;
  ::Protocol::UpdateWeiWen* _internal_add_weiwenlist();
  public:
  const ::Protocol::UpdateWeiWen& weiwenlist(int index) const;
  ::Protocol::UpdateWeiWen* add_weiwenlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UpdateWeiWen >&
      weiwenlist() const;

  // @@protoc_insertion_point(class_scope:Protocol.C2SUpdateWeiWen)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UpdateWeiWen > weiwenlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class C2SDeleteWeiWen :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2SDeleteWeiWen) */ {
 public:
  C2SDeleteWeiWen();
  virtual ~C2SDeleteWeiWen();

  C2SDeleteWeiWen(const C2SDeleteWeiWen& from);
  C2SDeleteWeiWen(C2SDeleteWeiWen&& from) noexcept
    : C2SDeleteWeiWen() {
    *this = ::std::move(from);
  }

  inline C2SDeleteWeiWen& operator=(const C2SDeleteWeiWen& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2SDeleteWeiWen& operator=(C2SDeleteWeiWen&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2SDeleteWeiWen& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2SDeleteWeiWen* internal_default_instance() {
    return reinterpret_cast<const C2SDeleteWeiWen*>(
               &_C2SDeleteWeiWen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(C2SDeleteWeiWen& a, C2SDeleteWeiWen& b) {
    a.Swap(&b);
  }
  inline void Swap(C2SDeleteWeiWen* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2SDeleteWeiWen* New() const final {
    return CreateMaybeMessage<C2SDeleteWeiWen>(nullptr);
  }

  C2SDeleteWeiWen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2SDeleteWeiWen>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2SDeleteWeiWen& from);
  void MergeFrom(const C2SDeleteWeiWen& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SDeleteWeiWen* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2SDeleteWeiWen";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // repeated string name = 1;
  int name_size() const;
  private:
  int _internal_name_size() const;
  public:
  void clear_name();
  const std::string& name(int index) const;
  std::string* mutable_name(int index);
  void set_name(int index, const std::string& value);
  void set_name(int index, std::string&& value);
  void set_name(int index, const char* value);
  void set_name(int index, const char* value, size_t size);
  std::string* add_name();
  void add_name(const std::string& value);
  void add_name(std::string&& value);
  void add_name(const char* value);
  void add_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name();
  private:
  const std::string& _internal_name(int index) const;
  std::string* _internal_add_name();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2SDeleteWeiWen)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class WriteBook :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.WriteBook) */ {
 public:
  WriteBook();
  virtual ~WriteBook();

  WriteBook(const WriteBook& from);
  WriteBook(WriteBook&& from) noexcept
    : WriteBook() {
    *this = ::std::move(from);
  }

  inline WriteBook& operator=(const WriteBook& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteBook& operator=(WriteBook&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WriteBook& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteBook* internal_default_instance() {
    return reinterpret_cast<const WriteBook*>(
               &_WriteBook_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(WriteBook& a, WriteBook& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteBook* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteBook* New() const final {
    return CreateMaybeMessage<WriteBook>(nullptr);
  }

  WriteBook* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteBook>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WriteBook& from);
  void MergeFrom(const WriteBook& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteBook* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.WriteBook";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBBHFieldNumber = 1,
    kSBHFieldNumber = 2,
  };
  // string BBH = 1;
  void clear_bbh();
  const std::string& bbh() const;
  void set_bbh(const std::string& value);
  void set_bbh(std::string&& value);
  void set_bbh(const char* value);
  void set_bbh(const char* value, size_t size);
  std::string* mutable_bbh();
  std::string* release_bbh();
  void set_allocated_bbh(std::string* bbh);
  private:
  const std::string& _internal_bbh() const;
  void _internal_set_bbh(const std::string& value);
  std::string* _internal_mutable_bbh();
  public:

  // string SBH = 2;
  void clear_sbh();
  const std::string& sbh() const;
  void set_sbh(const std::string& value);
  void set_sbh(std::string&& value);
  void set_sbh(const char* value);
  void set_sbh(const char* value, size_t size);
  std::string* mutable_sbh();
  std::string* release_sbh();
  void set_allocated_sbh(std::string* sbh);
  private:
  const std::string& _internal_sbh() const;
  void _internal_set_sbh(const std::string& value);
  std::string* _internal_mutable_sbh();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.WriteBook)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bbh_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sbh_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class C2SWriteBook :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2SWriteBook) */ {
 public:
  C2SWriteBook();
  virtual ~C2SWriteBook();

  C2SWriteBook(const C2SWriteBook& from);
  C2SWriteBook(C2SWriteBook&& from) noexcept
    : C2SWriteBook() {
    *this = ::std::move(from);
  }

  inline C2SWriteBook& operator=(const C2SWriteBook& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2SWriteBook& operator=(C2SWriteBook&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2SWriteBook& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2SWriteBook* internal_default_instance() {
    return reinterpret_cast<const C2SWriteBook*>(
               &_C2SWriteBook_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(C2SWriteBook& a, C2SWriteBook& b) {
    a.Swap(&b);
  }
  inline void Swap(C2SWriteBook* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2SWriteBook* New() const final {
    return CreateMaybeMessage<C2SWriteBook>(nullptr);
  }

  C2SWriteBook* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2SWriteBook>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2SWriteBook& from);
  void MergeFrom(const C2SWriteBook& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SWriteBook* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2SWriteBook";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
  };
  // int32 request = 1;
  void clear_request();
  ::PROTOBUF_NAMESPACE_ID::int32 request() const;
  void set_request(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_request() const;
  void _internal_set_request(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2SWriteBook)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class S2CWriteBook :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2CWriteBook) */ {
 public:
  S2CWriteBook();
  virtual ~S2CWriteBook();

  S2CWriteBook(const S2CWriteBook& from);
  S2CWriteBook(S2CWriteBook&& from) noexcept
    : S2CWriteBook() {
    *this = ::std::move(from);
  }

  inline S2CWriteBook& operator=(const S2CWriteBook& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2CWriteBook& operator=(S2CWriteBook&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const S2CWriteBook& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2CWriteBook* internal_default_instance() {
    return reinterpret_cast<const S2CWriteBook*>(
               &_S2CWriteBook_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(S2CWriteBook& a, S2CWriteBook& b) {
    a.Swap(&b);
  }
  inline void Swap(S2CWriteBook* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S2CWriteBook* New() const final {
    return CreateMaybeMessage<S2CWriteBook>(nullptr);
  }

  S2CWriteBook* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S2CWriteBook>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S2CWriteBook& from);
  void MergeFrom(const S2CWriteBook& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2CWriteBook* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2CWriteBook";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWriteBookListFieldNumber = 1,
  };
  // repeated .Protocol.Book writeBookList = 1;
  int writebooklist_size() const;
  private:
  int _internal_writebooklist_size() const;
  public:
  void clear_writebooklist();
  ::Protocol::Book* mutable_writebooklist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Book >*
      mutable_writebooklist();
  private:
  const ::Protocol::Book& _internal_writebooklist(int index) const;
  ::Protocol::Book* _internal_add_writebooklist();
  public:
  const ::Protocol::Book& writebooklist(int index) const;
  ::Protocol::Book* add_writebooklist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Book >&
      writebooklist() const;

  // @@protoc_insertion_point(class_scope:Protocol.S2CWriteBook)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Book > writebooklist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class C2SSearchWriteBook :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2SSearchWriteBook) */ {
 public:
  C2SSearchWriteBook();
  virtual ~C2SSearchWriteBook();

  C2SSearchWriteBook(const C2SSearchWriteBook& from);
  C2SSearchWriteBook(C2SSearchWriteBook&& from) noexcept
    : C2SSearchWriteBook() {
    *this = ::std::move(from);
  }

  inline C2SSearchWriteBook& operator=(const C2SSearchWriteBook& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2SSearchWriteBook& operator=(C2SSearchWriteBook&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2SSearchWriteBook& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2SSearchWriteBook* internal_default_instance() {
    return reinterpret_cast<const C2SSearchWriteBook*>(
               &_C2SSearchWriteBook_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(C2SSearchWriteBook& a, C2SSearchWriteBook& b) {
    a.Swap(&b);
  }
  inline void Swap(C2SSearchWriteBook* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2SSearchWriteBook* New() const final {
    return CreateMaybeMessage<C2SSearchWriteBook>(nullptr);
  }

  C2SSearchWriteBook* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2SSearchWriteBook>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2SSearchWriteBook& from);
  void MergeFrom(const C2SSearchWriteBook& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SSearchWriteBook* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2SSearchWriteBook";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
  };
  // int32 request = 1;
  void clear_request();
  ::PROTOBUF_NAMESPACE_ID::int32 request() const;
  void set_request(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_request() const;
  void _internal_set_request(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2SSearchWriteBook)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class S2CSearchWriteBook :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2CSearchWriteBook) */ {
 public:
  S2CSearchWriteBook();
  virtual ~S2CSearchWriteBook();

  S2CSearchWriteBook(const S2CSearchWriteBook& from);
  S2CSearchWriteBook(S2CSearchWriteBook&& from) noexcept
    : S2CSearchWriteBook() {
    *this = ::std::move(from);
  }

  inline S2CSearchWriteBook& operator=(const S2CSearchWriteBook& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2CSearchWriteBook& operator=(S2CSearchWriteBook&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const S2CSearchWriteBook& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2CSearchWriteBook* internal_default_instance() {
    return reinterpret_cast<const S2CSearchWriteBook*>(
               &_S2CSearchWriteBook_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(S2CSearchWriteBook& a, S2CSearchWriteBook& b) {
    a.Swap(&b);
  }
  inline void Swap(S2CSearchWriteBook* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S2CSearchWriteBook* New() const final {
    return CreateMaybeMessage<S2CSearchWriteBook>(nullptr);
  }

  S2CSearchWriteBook* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S2CSearchWriteBook>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S2CSearchWriteBook& from);
  void MergeFrom(const S2CSearchWriteBook& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2CSearchWriteBook* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2CSearchWriteBook";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWriteBookListFieldNumber = 1,
  };
  // repeated .Protocol.WriteBook writeBookList = 1;
  int writebooklist_size() const;
  private:
  int _internal_writebooklist_size() const;
  public:
  void clear_writebooklist();
  ::Protocol::WriteBook* mutable_writebooklist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::WriteBook >*
      mutable_writebooklist();
  private:
  const ::Protocol::WriteBook& _internal_writebooklist(int index) const;
  ::Protocol::WriteBook* _internal_add_writebooklist();
  public:
  const ::Protocol::WriteBook& writebooklist(int index) const;
  ::Protocol::WriteBook* add_writebooklist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::WriteBook >&
      writebooklist() const;

  // @@protoc_insertion_point(class_scope:Protocol.S2CSearchWriteBook)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::WriteBook > writebooklist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class C2SAddWriteBook :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2SAddWriteBook) */ {
 public:
  C2SAddWriteBook();
  virtual ~C2SAddWriteBook();

  C2SAddWriteBook(const C2SAddWriteBook& from);
  C2SAddWriteBook(C2SAddWriteBook&& from) noexcept
    : C2SAddWriteBook() {
    *this = ::std::move(from);
  }

  inline C2SAddWriteBook& operator=(const C2SAddWriteBook& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2SAddWriteBook& operator=(C2SAddWriteBook&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2SAddWriteBook& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2SAddWriteBook* internal_default_instance() {
    return reinterpret_cast<const C2SAddWriteBook*>(
               &_C2SAddWriteBook_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(C2SAddWriteBook& a, C2SAddWriteBook& b) {
    a.Swap(&b);
  }
  inline void Swap(C2SAddWriteBook* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2SAddWriteBook* New() const final {
    return CreateMaybeMessage<C2SAddWriteBook>(nullptr);
  }

  C2SAddWriteBook* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2SAddWriteBook>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2SAddWriteBook& from);
  void MergeFrom(const C2SAddWriteBook& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SAddWriteBook* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2SAddWriteBook";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWriteBookListFieldNumber = 1,
  };
  // repeated .Protocol.WriteBook writeBookList = 1;
  int writebooklist_size() const;
  private:
  int _internal_writebooklist_size() const;
  public:
  void clear_writebooklist();
  ::Protocol::WriteBook* mutable_writebooklist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::WriteBook >*
      mutable_writebooklist();
  private:
  const ::Protocol::WriteBook& _internal_writebooklist(int index) const;
  ::Protocol::WriteBook* _internal_add_writebooklist();
  public:
  const ::Protocol::WriteBook& writebooklist(int index) const;
  ::Protocol::WriteBook* add_writebooklist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::WriteBook >&
      writebooklist() const;

  // @@protoc_insertion_point(class_scope:Protocol.C2SAddWriteBook)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::WriteBook > writebooklist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class DoYanTao :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.DoYanTao) */ {
 public:
  DoYanTao();
  virtual ~DoYanTao();

  DoYanTao(const DoYanTao& from);
  DoYanTao(DoYanTao&& from) noexcept
    : DoYanTao() {
    *this = ::std::move(from);
  }

  inline DoYanTao& operator=(const DoYanTao& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoYanTao& operator=(DoYanTao&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DoYanTao& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoYanTao* internal_default_instance() {
    return reinterpret_cast<const DoYanTao*>(
               &_DoYanTao_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(DoYanTao& a, DoYanTao& b) {
    a.Swap(&b);
  }
  inline void Swap(DoYanTao* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DoYanTao* New() const final {
    return CreateMaybeMessage<DoYanTao>(nullptr);
  }

  DoYanTao* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoYanTao>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoYanTao& from);
  void MergeFrom(const DoYanTao& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoYanTao* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.DoYanTao";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSBHFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string SBH = 2;
  void clear_sbh();
  const std::string& sbh() const;
  void set_sbh(const std::string& value);
  void set_sbh(std::string&& value);
  void set_sbh(const char* value);
  void set_sbh(const char* value, size_t size);
  std::string* mutable_sbh();
  std::string* release_sbh();
  void set_allocated_sbh(std::string* sbh);
  private:
  const std::string& _internal_sbh() const;
  void _internal_set_sbh(const std::string& value);
  std::string* _internal_mutable_sbh();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.DoYanTao)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sbh_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class C2SDoYanTao :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2SDoYanTao) */ {
 public:
  C2SDoYanTao();
  virtual ~C2SDoYanTao();

  C2SDoYanTao(const C2SDoYanTao& from);
  C2SDoYanTao(C2SDoYanTao&& from) noexcept
    : C2SDoYanTao() {
    *this = ::std::move(from);
  }

  inline C2SDoYanTao& operator=(const C2SDoYanTao& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2SDoYanTao& operator=(C2SDoYanTao&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2SDoYanTao& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2SDoYanTao* internal_default_instance() {
    return reinterpret_cast<const C2SDoYanTao*>(
               &_C2SDoYanTao_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(C2SDoYanTao& a, C2SDoYanTao& b) {
    a.Swap(&b);
  }
  inline void Swap(C2SDoYanTao* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2SDoYanTao* New() const final {
    return CreateMaybeMessage<C2SDoYanTao>(nullptr);
  }

  C2SDoYanTao* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2SDoYanTao>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2SDoYanTao& from);
  void MergeFrom(const C2SDoYanTao& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SDoYanTao* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2SDoYanTao";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
  };
  // int32 request = 1;
  void clear_request();
  ::PROTOBUF_NAMESPACE_ID::int32 request() const;
  void set_request(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_request() const;
  void _internal_set_request(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2SDoYanTao)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class S2CDoYanTao :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2CDoYanTao) */ {
 public:
  S2CDoYanTao();
  virtual ~S2CDoYanTao();

  S2CDoYanTao(const S2CDoYanTao& from);
  S2CDoYanTao(S2CDoYanTao&& from) noexcept
    : S2CDoYanTao() {
    *this = ::std::move(from);
  }

  inline S2CDoYanTao& operator=(const S2CDoYanTao& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2CDoYanTao& operator=(S2CDoYanTao&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const S2CDoYanTao& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2CDoYanTao* internal_default_instance() {
    return reinterpret_cast<const S2CDoYanTao*>(
               &_S2CDoYanTao_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(S2CDoYanTao& a, S2CDoYanTao& b) {
    a.Swap(&b);
  }
  inline void Swap(S2CDoYanTao* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S2CDoYanTao* New() const final {
    return CreateMaybeMessage<S2CDoYanTao>(nullptr);
  }

  S2CDoYanTao* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S2CDoYanTao>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S2CDoYanTao& from);
  void MergeFrom(const S2CDoYanTao& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2CDoYanTao* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2CDoYanTao";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDoYanTaoListFieldNumber = 1,
  };
  // repeated .Protocol.YanTao doYanTaoList = 1;
  int doyantaolist_size() const;
  private:
  int _internal_doyantaolist_size() const;
  public:
  void clear_doyantaolist();
  ::Protocol::YanTao* mutable_doyantaolist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::YanTao >*
      mutable_doyantaolist();
  private:
  const ::Protocol::YanTao& _internal_doyantaolist(int index) const;
  ::Protocol::YanTao* _internal_add_doyantaolist();
  public:
  const ::Protocol::YanTao& doyantaolist(int index) const;
  ::Protocol::YanTao* add_doyantaolist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::YanTao >&
      doyantaolist() const;

  // @@protoc_insertion_point(class_scope:Protocol.S2CDoYanTao)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::YanTao > doyantaolist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class C2SSearchDoYanTao :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2SSearchDoYanTao) */ {
 public:
  C2SSearchDoYanTao();
  virtual ~C2SSearchDoYanTao();

  C2SSearchDoYanTao(const C2SSearchDoYanTao& from);
  C2SSearchDoYanTao(C2SSearchDoYanTao&& from) noexcept
    : C2SSearchDoYanTao() {
    *this = ::std::move(from);
  }

  inline C2SSearchDoYanTao& operator=(const C2SSearchDoYanTao& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2SSearchDoYanTao& operator=(C2SSearchDoYanTao&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2SSearchDoYanTao& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2SSearchDoYanTao* internal_default_instance() {
    return reinterpret_cast<const C2SSearchDoYanTao*>(
               &_C2SSearchDoYanTao_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(C2SSearchDoYanTao& a, C2SSearchDoYanTao& b) {
    a.Swap(&b);
  }
  inline void Swap(C2SSearchDoYanTao* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2SSearchDoYanTao* New() const final {
    return CreateMaybeMessage<C2SSearchDoYanTao>(nullptr);
  }

  C2SSearchDoYanTao* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2SSearchDoYanTao>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2SSearchDoYanTao& from);
  void MergeFrom(const C2SSearchDoYanTao& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SSearchDoYanTao* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2SSearchDoYanTao";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
  };
  // int32 request = 1;
  void clear_request();
  ::PROTOBUF_NAMESPACE_ID::int32 request() const;
  void set_request(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_request() const;
  void _internal_set_request(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2SSearchDoYanTao)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class S2CSearchDoYanTao :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2CSearchDoYanTao) */ {
 public:
  S2CSearchDoYanTao();
  virtual ~S2CSearchDoYanTao();

  S2CSearchDoYanTao(const S2CSearchDoYanTao& from);
  S2CSearchDoYanTao(S2CSearchDoYanTao&& from) noexcept
    : S2CSearchDoYanTao() {
    *this = ::std::move(from);
  }

  inline S2CSearchDoYanTao& operator=(const S2CSearchDoYanTao& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2CSearchDoYanTao& operator=(S2CSearchDoYanTao&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const S2CSearchDoYanTao& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2CSearchDoYanTao* internal_default_instance() {
    return reinterpret_cast<const S2CSearchDoYanTao*>(
               &_S2CSearchDoYanTao_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(S2CSearchDoYanTao& a, S2CSearchDoYanTao& b) {
    a.Swap(&b);
  }
  inline void Swap(S2CSearchDoYanTao* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S2CSearchDoYanTao* New() const final {
    return CreateMaybeMessage<S2CSearchDoYanTao>(nullptr);
  }

  S2CSearchDoYanTao* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S2CSearchDoYanTao>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S2CSearchDoYanTao& from);
  void MergeFrom(const S2CSearchDoYanTao& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2CSearchDoYanTao* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2CSearchDoYanTao";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDoYanTaoListFieldNumber = 1,
  };
  // repeated .Protocol.DoYanTao doYanTaoList = 1;
  int doyantaolist_size() const;
  private:
  int _internal_doyantaolist_size() const;
  public:
  void clear_doyantaolist();
  ::Protocol::DoYanTao* mutable_doyantaolist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::DoYanTao >*
      mutable_doyantaolist();
  private:
  const ::Protocol::DoYanTao& _internal_doyantaolist(int index) const;
  ::Protocol::DoYanTao* _internal_add_doyantaolist();
  public:
  const ::Protocol::DoYanTao& doyantaolist(int index) const;
  ::Protocol::DoYanTao* add_doyantaolist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::DoYanTao >&
      doyantaolist() const;

  // @@protoc_insertion_point(class_scope:Protocol.S2CSearchDoYanTao)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::DoYanTao > doyantaolist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class C2SAddDoYanTao :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2SAddDoYanTao) */ {
 public:
  C2SAddDoYanTao();
  virtual ~C2SAddDoYanTao();

  C2SAddDoYanTao(const C2SAddDoYanTao& from);
  C2SAddDoYanTao(C2SAddDoYanTao&& from) noexcept
    : C2SAddDoYanTao() {
    *this = ::std::move(from);
  }

  inline C2SAddDoYanTao& operator=(const C2SAddDoYanTao& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2SAddDoYanTao& operator=(C2SAddDoYanTao&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2SAddDoYanTao& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2SAddDoYanTao* internal_default_instance() {
    return reinterpret_cast<const C2SAddDoYanTao*>(
               &_C2SAddDoYanTao_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(C2SAddDoYanTao& a, C2SAddDoYanTao& b) {
    a.Swap(&b);
  }
  inline void Swap(C2SAddDoYanTao* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2SAddDoYanTao* New() const final {
    return CreateMaybeMessage<C2SAddDoYanTao>(nullptr);
  }

  C2SAddDoYanTao* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2SAddDoYanTao>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2SAddDoYanTao& from);
  void MergeFrom(const C2SAddDoYanTao& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SAddDoYanTao* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2SAddDoYanTao";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDoYanTaoListFieldNumber = 1,
  };
  // repeated .Protocol.DoYanTao doYanTaoList = 1;
  int doyantaolist_size() const;
  private:
  int _internal_doyantaolist_size() const;
  public:
  void clear_doyantaolist();
  ::Protocol::DoYanTao* mutable_doyantaolist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::DoYanTao >*
      mutable_doyantaolist();
  private:
  const ::Protocol::DoYanTao& _internal_doyantaolist(int index) const;
  ::Protocol::DoYanTao* _internal_add_doyantaolist();
  public:
  const ::Protocol::DoYanTao& doyantaolist(int index) const;
  ::Protocol::DoYanTao* add_doyantaolist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::DoYanTao >&
      doyantaolist() const;

  // @@protoc_insertion_point(class_scope:Protocol.C2SAddDoYanTao)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::DoYanTao > doyantaolist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class UpdateDoYanTao :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.UpdateDoYanTao) */ {
 public:
  UpdateDoYanTao();
  virtual ~UpdateDoYanTao();

  UpdateDoYanTao(const UpdateDoYanTao& from);
  UpdateDoYanTao(UpdateDoYanTao&& from) noexcept
    : UpdateDoYanTao() {
    *this = ::std::move(from);
  }

  inline UpdateDoYanTao& operator=(const UpdateDoYanTao& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDoYanTao& operator=(UpdateDoYanTao&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateDoYanTao& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateDoYanTao* internal_default_instance() {
    return reinterpret_cast<const UpdateDoYanTao*>(
               &_UpdateDoYanTao_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(UpdateDoYanTao& a, UpdateDoYanTao& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateDoYanTao* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateDoYanTao* New() const final {
    return CreateMaybeMessage<UpdateDoYanTao>(nullptr);
  }

  UpdateDoYanTao* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateDoYanTao>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateDoYanTao& from);
  void MergeFrom(const UpdateDoYanTao& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateDoYanTao* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.UpdateDoYanTao";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldNameFieldNumber = 2,
    kYantaoFieldNumber = 1,
  };
  // string oldName = 2;
  void clear_oldname();
  const std::string& oldname() const;
  void set_oldname(const std::string& value);
  void set_oldname(std::string&& value);
  void set_oldname(const char* value);
  void set_oldname(const char* value, size_t size);
  std::string* mutable_oldname();
  std::string* release_oldname();
  void set_allocated_oldname(std::string* oldname);
  private:
  const std::string& _internal_oldname() const;
  void _internal_set_oldname(const std::string& value);
  std::string* _internal_mutable_oldname();
  public:

  // .Protocol.DoYanTao yantao = 1;
  bool has_yantao() const;
  private:
  bool _internal_has_yantao() const;
  public:
  void clear_yantao();
  const ::Protocol::DoYanTao& yantao() const;
  ::Protocol::DoYanTao* release_yantao();
  ::Protocol::DoYanTao* mutable_yantao();
  void set_allocated_yantao(::Protocol::DoYanTao* yantao);
  private:
  const ::Protocol::DoYanTao& _internal_yantao() const;
  ::Protocol::DoYanTao* _internal_mutable_yantao();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.UpdateDoYanTao)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oldname_;
  ::Protocol::DoYanTao* yantao_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class C2SUpdateDoYanTao :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2SUpdateDoYanTao) */ {
 public:
  C2SUpdateDoYanTao();
  virtual ~C2SUpdateDoYanTao();

  C2SUpdateDoYanTao(const C2SUpdateDoYanTao& from);
  C2SUpdateDoYanTao(C2SUpdateDoYanTao&& from) noexcept
    : C2SUpdateDoYanTao() {
    *this = ::std::move(from);
  }

  inline C2SUpdateDoYanTao& operator=(const C2SUpdateDoYanTao& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2SUpdateDoYanTao& operator=(C2SUpdateDoYanTao&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2SUpdateDoYanTao& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2SUpdateDoYanTao* internal_default_instance() {
    return reinterpret_cast<const C2SUpdateDoYanTao*>(
               &_C2SUpdateDoYanTao_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(C2SUpdateDoYanTao& a, C2SUpdateDoYanTao& b) {
    a.Swap(&b);
  }
  inline void Swap(C2SUpdateDoYanTao* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2SUpdateDoYanTao* New() const final {
    return CreateMaybeMessage<C2SUpdateDoYanTao>(nullptr);
  }

  C2SUpdateDoYanTao* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2SUpdateDoYanTao>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2SUpdateDoYanTao& from);
  void MergeFrom(const C2SUpdateDoYanTao& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SUpdateDoYanTao* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2SUpdateDoYanTao";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYanTaoListFieldNumber = 1,
  };
  // repeated .Protocol.UpdateDoYanTao yanTaoList = 1;
  int yantaolist_size() const;
  private:
  int _internal_yantaolist_size() const;
  public:
  void clear_yantaolist();
  ::Protocol::UpdateDoYanTao* mutable_yantaolist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UpdateDoYanTao >*
      mutable_yantaolist();
  private:
  const ::Protocol::UpdateDoYanTao& _internal_yantaolist(int index) const;
  ::Protocol::UpdateDoYanTao* _internal_add_yantaolist();
  public:
  const ::Protocol::UpdateDoYanTao& yantaolist(int index) const;
  ::Protocol::UpdateDoYanTao* add_yantaolist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UpdateDoYanTao >&
      yantaolist() const;

  // @@protoc_insertion_point(class_scope:Protocol.C2SUpdateDoYanTao)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UpdateDoYanTao > yantaolist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class C2SDeleteDoYanTao :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2SDeleteDoYanTao) */ {
 public:
  C2SDeleteDoYanTao();
  virtual ~C2SDeleteDoYanTao();

  C2SDeleteDoYanTao(const C2SDeleteDoYanTao& from);
  C2SDeleteDoYanTao(C2SDeleteDoYanTao&& from) noexcept
    : C2SDeleteDoYanTao() {
    *this = ::std::move(from);
  }

  inline C2SDeleteDoYanTao& operator=(const C2SDeleteDoYanTao& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2SDeleteDoYanTao& operator=(C2SDeleteDoYanTao&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2SDeleteDoYanTao& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2SDeleteDoYanTao* internal_default_instance() {
    return reinterpret_cast<const C2SDeleteDoYanTao*>(
               &_C2SDeleteDoYanTao_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(C2SDeleteDoYanTao& a, C2SDeleteDoYanTao& b) {
    a.Swap(&b);
  }
  inline void Swap(C2SDeleteDoYanTao* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2SDeleteDoYanTao* New() const final {
    return CreateMaybeMessage<C2SDeleteDoYanTao>(nullptr);
  }

  C2SDeleteDoYanTao* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2SDeleteDoYanTao>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2SDeleteDoYanTao& from);
  void MergeFrom(const C2SDeleteDoYanTao& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SDeleteDoYanTao* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2SDeleteDoYanTao";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // repeated string name = 1;
  int name_size() const;
  private:
  int _internal_name_size() const;
  public:
  void clear_name();
  const std::string& name(int index) const;
  std::string* mutable_name(int index);
  void set_name(int index, const std::string& value);
  void set_name(int index, std::string&& value);
  void set_name(int index, const char* value);
  void set_name(int index, const char* value, size_t size);
  std::string* add_name();
  void add_name(const std::string& value);
  void add_name(std::string&& value);
  void add_name(const char* value);
  void add_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name();
  private:
  const std::string& _internal_name(int index) const;
  std::string* _internal_add_name();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2SDeleteDoYanTao)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class DoWeiWen :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.DoWeiWen) */ {
 public:
  DoWeiWen();
  virtual ~DoWeiWen();

  DoWeiWen(const DoWeiWen& from);
  DoWeiWen(DoWeiWen&& from) noexcept
    : DoWeiWen() {
    *this = ::std::move(from);
  }

  inline DoWeiWen& operator=(const DoWeiWen& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoWeiWen& operator=(DoWeiWen&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DoWeiWen& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoWeiWen* internal_default_instance() {
    return reinterpret_cast<const DoWeiWen*>(
               &_DoWeiWen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(DoWeiWen& a, DoWeiWen& b) {
    a.Swap(&b);
  }
  inline void Swap(DoWeiWen* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DoWeiWen* New() const final {
    return CreateMaybeMessage<DoWeiWen>(nullptr);
  }

  DoWeiWen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoWeiWen>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoWeiWen& from);
  void MergeFrom(const DoWeiWen& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoWeiWen* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.DoWeiWen";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSBHFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string SBH = 2;
  void clear_sbh();
  const std::string& sbh() const;
  void set_sbh(const std::string& value);
  void set_sbh(std::string&& value);
  void set_sbh(const char* value);
  void set_sbh(const char* value, size_t size);
  std::string* mutable_sbh();
  std::string* release_sbh();
  void set_allocated_sbh(std::string* sbh);
  private:
  const std::string& _internal_sbh() const;
  void _internal_set_sbh(const std::string& value);
  std::string* _internal_mutable_sbh();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.DoWeiWen)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sbh_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class C2SDoWeiWen :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2SDoWeiWen) */ {
 public:
  C2SDoWeiWen();
  virtual ~C2SDoWeiWen();

  C2SDoWeiWen(const C2SDoWeiWen& from);
  C2SDoWeiWen(C2SDoWeiWen&& from) noexcept
    : C2SDoWeiWen() {
    *this = ::std::move(from);
  }

  inline C2SDoWeiWen& operator=(const C2SDoWeiWen& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2SDoWeiWen& operator=(C2SDoWeiWen&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2SDoWeiWen& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2SDoWeiWen* internal_default_instance() {
    return reinterpret_cast<const C2SDoWeiWen*>(
               &_C2SDoWeiWen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(C2SDoWeiWen& a, C2SDoWeiWen& b) {
    a.Swap(&b);
  }
  inline void Swap(C2SDoWeiWen* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2SDoWeiWen* New() const final {
    return CreateMaybeMessage<C2SDoWeiWen>(nullptr);
  }

  C2SDoWeiWen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2SDoWeiWen>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2SDoWeiWen& from);
  void MergeFrom(const C2SDoWeiWen& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SDoWeiWen* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2SDoWeiWen";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
  };
  // int32 request = 1;
  void clear_request();
  ::PROTOBUF_NAMESPACE_ID::int32 request() const;
  void set_request(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_request() const;
  void _internal_set_request(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2SDoWeiWen)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class S2cDoWeiWen :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2cDoWeiWen) */ {
 public:
  S2cDoWeiWen();
  virtual ~S2cDoWeiWen();

  S2cDoWeiWen(const S2cDoWeiWen& from);
  S2cDoWeiWen(S2cDoWeiWen&& from) noexcept
    : S2cDoWeiWen() {
    *this = ::std::move(from);
  }

  inline S2cDoWeiWen& operator=(const S2cDoWeiWen& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2cDoWeiWen& operator=(S2cDoWeiWen&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const S2cDoWeiWen& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2cDoWeiWen* internal_default_instance() {
    return reinterpret_cast<const S2cDoWeiWen*>(
               &_S2cDoWeiWen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(S2cDoWeiWen& a, S2cDoWeiWen& b) {
    a.Swap(&b);
  }
  inline void Swap(S2cDoWeiWen* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S2cDoWeiWen* New() const final {
    return CreateMaybeMessage<S2cDoWeiWen>(nullptr);
  }

  S2cDoWeiWen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S2cDoWeiWen>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S2cDoWeiWen& from);
  void MergeFrom(const S2cDoWeiWen& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2cDoWeiWen* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2cDoWeiWen";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDoWeiWenListFieldNumber = 1,
  };
  // repeated .Protocol.WeiWen doWeiWenList = 1;
  int doweiwenlist_size() const;
  private:
  int _internal_doweiwenlist_size() const;
  public:
  void clear_doweiwenlist();
  ::Protocol::WeiWen* mutable_doweiwenlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::WeiWen >*
      mutable_doweiwenlist();
  private:
  const ::Protocol::WeiWen& _internal_doweiwenlist(int index) const;
  ::Protocol::WeiWen* _internal_add_doweiwenlist();
  public:
  const ::Protocol::WeiWen& doweiwenlist(int index) const;
  ::Protocol::WeiWen* add_doweiwenlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::WeiWen >&
      doweiwenlist() const;

  // @@protoc_insertion_point(class_scope:Protocol.S2cDoWeiWen)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::WeiWen > doweiwenlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class C2SSearchDoWeiwen :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2SSearchDoWeiwen) */ {
 public:
  C2SSearchDoWeiwen();
  virtual ~C2SSearchDoWeiwen();

  C2SSearchDoWeiwen(const C2SSearchDoWeiwen& from);
  C2SSearchDoWeiwen(C2SSearchDoWeiwen&& from) noexcept
    : C2SSearchDoWeiwen() {
    *this = ::std::move(from);
  }

  inline C2SSearchDoWeiwen& operator=(const C2SSearchDoWeiwen& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2SSearchDoWeiwen& operator=(C2SSearchDoWeiwen&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2SSearchDoWeiwen& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2SSearchDoWeiwen* internal_default_instance() {
    return reinterpret_cast<const C2SSearchDoWeiwen*>(
               &_C2SSearchDoWeiwen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(C2SSearchDoWeiwen& a, C2SSearchDoWeiwen& b) {
    a.Swap(&b);
  }
  inline void Swap(C2SSearchDoWeiwen* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2SSearchDoWeiwen* New() const final {
    return CreateMaybeMessage<C2SSearchDoWeiwen>(nullptr);
  }

  C2SSearchDoWeiwen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2SSearchDoWeiwen>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2SSearchDoWeiwen& from);
  void MergeFrom(const C2SSearchDoWeiwen& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SSearchDoWeiwen* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2SSearchDoWeiwen";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
  };
  // int32 request = 1;
  void clear_request();
  ::PROTOBUF_NAMESPACE_ID::int32 request() const;
  void set_request(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_request() const;
  void _internal_set_request(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2SSearchDoWeiwen)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class S2CSearchDoWeiwen :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2CSearchDoWeiwen) */ {
 public:
  S2CSearchDoWeiwen();
  virtual ~S2CSearchDoWeiwen();

  S2CSearchDoWeiwen(const S2CSearchDoWeiwen& from);
  S2CSearchDoWeiwen(S2CSearchDoWeiwen&& from) noexcept
    : S2CSearchDoWeiwen() {
    *this = ::std::move(from);
  }

  inline S2CSearchDoWeiwen& operator=(const S2CSearchDoWeiwen& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2CSearchDoWeiwen& operator=(S2CSearchDoWeiwen&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const S2CSearchDoWeiwen& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2CSearchDoWeiwen* internal_default_instance() {
    return reinterpret_cast<const S2CSearchDoWeiwen*>(
               &_S2CSearchDoWeiwen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(S2CSearchDoWeiwen& a, S2CSearchDoWeiwen& b) {
    a.Swap(&b);
  }
  inline void Swap(S2CSearchDoWeiwen* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S2CSearchDoWeiwen* New() const final {
    return CreateMaybeMessage<S2CSearchDoWeiwen>(nullptr);
  }

  S2CSearchDoWeiwen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S2CSearchDoWeiwen>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S2CSearchDoWeiwen& from);
  void MergeFrom(const S2CSearchDoWeiwen& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2CSearchDoWeiwen* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2CSearchDoWeiwen";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDoWeiWenListFieldNumber = 1,
  };
  // repeated .Protocol.DoWeiWen doWeiWenList = 1;
  int doweiwenlist_size() const;
  private:
  int _internal_doweiwenlist_size() const;
  public:
  void clear_doweiwenlist();
  ::Protocol::DoWeiWen* mutable_doweiwenlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::DoWeiWen >*
      mutable_doweiwenlist();
  private:
  const ::Protocol::DoWeiWen& _internal_doweiwenlist(int index) const;
  ::Protocol::DoWeiWen* _internal_add_doweiwenlist();
  public:
  const ::Protocol::DoWeiWen& doweiwenlist(int index) const;
  ::Protocol::DoWeiWen* add_doweiwenlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::DoWeiWen >&
      doweiwenlist() const;

  // @@protoc_insertion_point(class_scope:Protocol.S2CSearchDoWeiwen)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::DoWeiWen > doweiwenlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// -------------------------------------------------------------------

class C2SAddDoWeiWen :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2SAddDoWeiWen) */ {
 public:
  C2SAddDoWeiWen();
  virtual ~C2SAddDoWeiWen();

  C2SAddDoWeiWen(const C2SAddDoWeiWen& from);
  C2SAddDoWeiWen(C2SAddDoWeiWen&& from) noexcept
    : C2SAddDoWeiWen() {
    *this = ::std::move(from);
  }

  inline C2SAddDoWeiWen& operator=(const C2SAddDoWeiWen& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2SAddDoWeiWen& operator=(C2SAddDoWeiWen&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2SAddDoWeiWen& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2SAddDoWeiWen* internal_default_instance() {
    return reinterpret_cast<const C2SAddDoWeiWen*>(
               &_C2SAddDoWeiWen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(C2SAddDoWeiWen& a, C2SAddDoWeiWen& b) {
    a.Swap(&b);
  }
  inline void Swap(C2SAddDoWeiWen* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2SAddDoWeiWen* New() const final {
    return CreateMaybeMessage<C2SAddDoWeiWen>(nullptr);
  }

  C2SAddDoWeiWen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2SAddDoWeiWen>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2SAddDoWeiWen& from);
  void MergeFrom(const C2SAddDoWeiWen& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SAddDoWeiWen* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2SAddDoWeiWen";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgData_2eproto);
    return ::descriptor_table_MsgData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDoWeiWenListFieldNumber = 1,
  };
  // repeated .Protocol.DoWeiWen doWeiWenList = 1;
  int doweiwenlist_size() const;
  private:
  int _internal_doweiwenlist_size() const;
  public:
  void clear_doweiwenlist();
  ::Protocol::DoWeiWen* mutable_doweiwenlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::DoWeiWen >*
      mutable_doweiwenlist();
  private:
  const ::Protocol::DoWeiWen& _internal_doweiwenlist(int index) const;
  ::Protocol::DoWeiWen* _internal_add_doweiwenlist();
  public:
  const ::Protocol::DoWeiWen& doweiwenlist(int index) const;
  ::Protocol::DoWeiWen* add_doweiwenlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::DoWeiWen >&
      doweiwenlist() const;

  // @@protoc_insertion_point(class_scope:Protocol.C2SAddDoWeiWen)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::DoWeiWen > doweiwenlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Department

// string name = 1;
inline void Department::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Department::name() const {
  // @@protoc_insertion_point(field_get:Protocol.Department.name)
  return _internal_name();
}
inline void Department::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Protocol.Department.name)
}
inline std::string* Department::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Protocol.Department.name)
  return _internal_mutable_name();
}
inline const std::string& Department::_internal_name() const {
  return name_.GetNoArena();
}
inline void Department::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Department::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.Department.name)
}
inline void Department::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.Department.name)
}
inline void Department::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.Department.name)
}
inline std::string* Department::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Department::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.Department.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Department::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Protocol.Department.name)
}

// string BMH = 2;
inline void Department::clear_bmh() {
  bmh_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Department::bmh() const {
  // @@protoc_insertion_point(field_get:Protocol.Department.BMH)
  return _internal_bmh();
}
inline void Department::set_bmh(const std::string& value) {
  _internal_set_bmh(value);
  // @@protoc_insertion_point(field_set:Protocol.Department.BMH)
}
inline std::string* Department::mutable_bmh() {
  // @@protoc_insertion_point(field_mutable:Protocol.Department.BMH)
  return _internal_mutable_bmh();
}
inline const std::string& Department::_internal_bmh() const {
  return bmh_.GetNoArena();
}
inline void Department::_internal_set_bmh(const std::string& value) {
  
  bmh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Department::set_bmh(std::string&& value) {
  
  bmh_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.Department.BMH)
}
inline void Department::set_bmh(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bmh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.Department.BMH)
}
inline void Department::set_bmh(const char* value, size_t size) {
  
  bmh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.Department.BMH)
}
inline std::string* Department::_internal_mutable_bmh() {
  
  return bmh_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Department::release_bmh() {
  // @@protoc_insertion_point(field_release:Protocol.Department.BMH)
  
  return bmh_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Department::set_allocated_bmh(std::string* bmh) {
  if (bmh != nullptr) {
    
  } else {
    
  }
  bmh_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bmh);
  // @@protoc_insertion_point(field_set_allocated:Protocol.Department.BMH)
}

// -------------------------------------------------------------------

// C2SDepartment

// int32 request = 1;
inline void C2SDepartment::clear_request() {
  request_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C2SDepartment::_internal_request() const {
  return request_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C2SDepartment::request() const {
  // @@protoc_insertion_point(field_get:Protocol.C2SDepartment.request)
  return _internal_request();
}
inline void C2SDepartment::_internal_set_request(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  request_ = value;
}
inline void C2SDepartment::set_request(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_request(value);
  // @@protoc_insertion_point(field_set:Protocol.C2SDepartment.request)
}

// -------------------------------------------------------------------

// S2CDepartment

// repeated .Protocol.Department departmentList = 1;
inline int S2CDepartment::_internal_departmentlist_size() const {
  return departmentlist_.size();
}
inline int S2CDepartment::departmentlist_size() const {
  return _internal_departmentlist_size();
}
inline void S2CDepartment::clear_departmentlist() {
  departmentlist_.Clear();
}
inline ::Protocol::Department* S2CDepartment::mutable_departmentlist(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S2CDepartment.departmentList)
  return departmentlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Department >*
S2CDepartment::mutable_departmentlist() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2CDepartment.departmentList)
  return &departmentlist_;
}
inline const ::Protocol::Department& S2CDepartment::_internal_departmentlist(int index) const {
  return departmentlist_.Get(index);
}
inline const ::Protocol::Department& S2CDepartment::departmentlist(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2CDepartment.departmentList)
  return _internal_departmentlist(index);
}
inline ::Protocol::Department* S2CDepartment::_internal_add_departmentlist() {
  return departmentlist_.Add();
}
inline ::Protocol::Department* S2CDepartment::add_departmentlist() {
  // @@protoc_insertion_point(field_add:Protocol.S2CDepartment.departmentList)
  return _internal_add_departmentlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Department >&
S2CDepartment::departmentlist() const {
  // @@protoc_insertion_point(field_list:Protocol.S2CDepartment.departmentList)
  return departmentlist_;
}

// -------------------------------------------------------------------

// C2SAddDepartment

// repeated .Protocol.Department departmentList = 1;
inline int C2SAddDepartment::_internal_departmentlist_size() const {
  return departmentlist_.size();
}
inline int C2SAddDepartment::departmentlist_size() const {
  return _internal_departmentlist_size();
}
inline void C2SAddDepartment::clear_departmentlist() {
  departmentlist_.Clear();
}
inline ::Protocol::Department* C2SAddDepartment::mutable_departmentlist(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.C2SAddDepartment.departmentList)
  return departmentlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Department >*
C2SAddDepartment::mutable_departmentlist() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.C2SAddDepartment.departmentList)
  return &departmentlist_;
}
inline const ::Protocol::Department& C2SAddDepartment::_internal_departmentlist(int index) const {
  return departmentlist_.Get(index);
}
inline const ::Protocol::Department& C2SAddDepartment::departmentlist(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.C2SAddDepartment.departmentList)
  return _internal_departmentlist(index);
}
inline ::Protocol::Department* C2SAddDepartment::_internal_add_departmentlist() {
  return departmentlist_.Add();
}
inline ::Protocol::Department* C2SAddDepartment::add_departmentlist() {
  // @@protoc_insertion_point(field_add:Protocol.C2SAddDepartment.departmentList)
  return _internal_add_departmentlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Department >&
C2SAddDepartment::departmentlist() const {
  // @@protoc_insertion_point(field_list:Protocol.C2SAddDepartment.departmentList)
  return departmentlist_;
}

// -------------------------------------------------------------------

// UpdateDepartment

// .Protocol.Department department = 1;
inline bool UpdateDepartment::_internal_has_department() const {
  return this != internal_default_instance() && department_ != nullptr;
}
inline bool UpdateDepartment::has_department() const {
  return _internal_has_department();
}
inline void UpdateDepartment::clear_department() {
  if (GetArenaNoVirtual() == nullptr && department_ != nullptr) {
    delete department_;
  }
  department_ = nullptr;
}
inline const ::Protocol::Department& UpdateDepartment::_internal_department() const {
  const ::Protocol::Department* p = department_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Protocol::Department*>(
      &::Protocol::_Department_default_instance_);
}
inline const ::Protocol::Department& UpdateDepartment::department() const {
  // @@protoc_insertion_point(field_get:Protocol.UpdateDepartment.department)
  return _internal_department();
}
inline ::Protocol::Department* UpdateDepartment::release_department() {
  // @@protoc_insertion_point(field_release:Protocol.UpdateDepartment.department)
  
  ::Protocol::Department* temp = department_;
  department_ = nullptr;
  return temp;
}
inline ::Protocol::Department* UpdateDepartment::_internal_mutable_department() {
  
  if (department_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Department>(GetArenaNoVirtual());
    department_ = p;
  }
  return department_;
}
inline ::Protocol::Department* UpdateDepartment::mutable_department() {
  // @@protoc_insertion_point(field_mutable:Protocol.UpdateDepartment.department)
  return _internal_mutable_department();
}
inline void UpdateDepartment::set_allocated_department(::Protocol::Department* department) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete department_;
  }
  if (department) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      department = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, department, submessage_arena);
    }
    
  } else {
    
  }
  department_ = department;
  // @@protoc_insertion_point(field_set_allocated:Protocol.UpdateDepartment.department)
}

// string oldBH = 2;
inline void UpdateDepartment::clear_oldbh() {
  oldbh_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateDepartment::oldbh() const {
  // @@protoc_insertion_point(field_get:Protocol.UpdateDepartment.oldBH)
  return _internal_oldbh();
}
inline void UpdateDepartment::set_oldbh(const std::string& value) {
  _internal_set_oldbh(value);
  // @@protoc_insertion_point(field_set:Protocol.UpdateDepartment.oldBH)
}
inline std::string* UpdateDepartment::mutable_oldbh() {
  // @@protoc_insertion_point(field_mutable:Protocol.UpdateDepartment.oldBH)
  return _internal_mutable_oldbh();
}
inline const std::string& UpdateDepartment::_internal_oldbh() const {
  return oldbh_.GetNoArena();
}
inline void UpdateDepartment::_internal_set_oldbh(const std::string& value) {
  
  oldbh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpdateDepartment::set_oldbh(std::string&& value) {
  
  oldbh_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.UpdateDepartment.oldBH)
}
inline void UpdateDepartment::set_oldbh(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  oldbh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.UpdateDepartment.oldBH)
}
inline void UpdateDepartment::set_oldbh(const char* value, size_t size) {
  
  oldbh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.UpdateDepartment.oldBH)
}
inline std::string* UpdateDepartment::_internal_mutable_oldbh() {
  
  return oldbh_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateDepartment::release_oldbh() {
  // @@protoc_insertion_point(field_release:Protocol.UpdateDepartment.oldBH)
  
  return oldbh_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateDepartment::set_allocated_oldbh(std::string* oldbh) {
  if (oldbh != nullptr) {
    
  } else {
    
  }
  oldbh_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), oldbh);
  // @@protoc_insertion_point(field_set_allocated:Protocol.UpdateDepartment.oldBH)
}

// -------------------------------------------------------------------

// C2SUpdateDepartment

// repeated .Protocol.UpdateDepartment departmentList = 1;
inline int C2SUpdateDepartment::_internal_departmentlist_size() const {
  return departmentlist_.size();
}
inline int C2SUpdateDepartment::departmentlist_size() const {
  return _internal_departmentlist_size();
}
inline void C2SUpdateDepartment::clear_departmentlist() {
  departmentlist_.Clear();
}
inline ::Protocol::UpdateDepartment* C2SUpdateDepartment::mutable_departmentlist(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.C2SUpdateDepartment.departmentList)
  return departmentlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UpdateDepartment >*
C2SUpdateDepartment::mutable_departmentlist() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.C2SUpdateDepartment.departmentList)
  return &departmentlist_;
}
inline const ::Protocol::UpdateDepartment& C2SUpdateDepartment::_internal_departmentlist(int index) const {
  return departmentlist_.Get(index);
}
inline const ::Protocol::UpdateDepartment& C2SUpdateDepartment::departmentlist(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.C2SUpdateDepartment.departmentList)
  return _internal_departmentlist(index);
}
inline ::Protocol::UpdateDepartment* C2SUpdateDepartment::_internal_add_departmentlist() {
  return departmentlist_.Add();
}
inline ::Protocol::UpdateDepartment* C2SUpdateDepartment::add_departmentlist() {
  // @@protoc_insertion_point(field_add:Protocol.C2SUpdateDepartment.departmentList)
  return _internal_add_departmentlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UpdateDepartment >&
C2SUpdateDepartment::departmentlist() const {
  // @@protoc_insertion_point(field_list:Protocol.C2SUpdateDepartment.departmentList)
  return departmentlist_;
}

// -------------------------------------------------------------------

// C2SDeleteDepartment

// repeated string bhList = 1;
inline int C2SDeleteDepartment::_internal_bhlist_size() const {
  return bhlist_.size();
}
inline int C2SDeleteDepartment::bhlist_size() const {
  return _internal_bhlist_size();
}
inline void C2SDeleteDepartment::clear_bhlist() {
  bhlist_.Clear();
}
inline std::string* C2SDeleteDepartment::add_bhlist() {
  // @@protoc_insertion_point(field_add_mutable:Protocol.C2SDeleteDepartment.bhList)
  return _internal_add_bhlist();
}
inline const std::string& C2SDeleteDepartment::_internal_bhlist(int index) const {
  return bhlist_.Get(index);
}
inline const std::string& C2SDeleteDepartment::bhlist(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.C2SDeleteDepartment.bhList)
  return _internal_bhlist(index);
}
inline std::string* C2SDeleteDepartment::mutable_bhlist(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.C2SDeleteDepartment.bhList)
  return bhlist_.Mutable(index);
}
inline void C2SDeleteDepartment::set_bhlist(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Protocol.C2SDeleteDepartment.bhList)
  bhlist_.Mutable(index)->assign(value);
}
inline void C2SDeleteDepartment::set_bhlist(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Protocol.C2SDeleteDepartment.bhList)
  bhlist_.Mutable(index)->assign(std::move(value));
}
inline void C2SDeleteDepartment::set_bhlist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bhlist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.C2SDeleteDepartment.bhList)
}
inline void C2SDeleteDepartment::set_bhlist(int index, const char* value, size_t size) {
  bhlist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.C2SDeleteDepartment.bhList)
}
inline std::string* C2SDeleteDepartment::_internal_add_bhlist() {
  return bhlist_.Add();
}
inline void C2SDeleteDepartment::add_bhlist(const std::string& value) {
  bhlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Protocol.C2SDeleteDepartment.bhList)
}
inline void C2SDeleteDepartment::add_bhlist(std::string&& value) {
  bhlist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Protocol.C2SDeleteDepartment.bhList)
}
inline void C2SDeleteDepartment::add_bhlist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bhlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Protocol.C2SDeleteDepartment.bhList)
}
inline void C2SDeleteDepartment::add_bhlist(const char* value, size_t size) {
  bhlist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Protocol.C2SDeleteDepartment.bhList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
C2SDeleteDepartment::bhlist() const {
  // @@protoc_insertion_point(field_list:Protocol.C2SDeleteDepartment.bhList)
  return bhlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
C2SDeleteDepartment::mutable_bhlist() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.C2SDeleteDepartment.bhList)
  return &bhlist_;
}

// -------------------------------------------------------------------

// Book

// string name = 1;
inline void Book::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Book::name() const {
  // @@protoc_insertion_point(field_get:Protocol.Book.name)
  return _internal_name();
}
inline void Book::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Protocol.Book.name)
}
inline std::string* Book::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Protocol.Book.name)
  return _internal_mutable_name();
}
inline const std::string& Book::_internal_name() const {
  return name_.GetNoArena();
}
inline void Book::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Book::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.Book.name)
}
inline void Book::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.Book.name)
}
inline void Book::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.Book.name)
}
inline std::string* Book::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Book::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.Book.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Book::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Protocol.Book.name)
}

// string time = 2;
inline void Book::clear_time() {
  time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Book::time() const {
  // @@protoc_insertion_point(field_get:Protocol.Book.time)
  return _internal_time();
}
inline void Book::set_time(const std::string& value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:Protocol.Book.time)
}
inline std::string* Book::mutable_time() {
  // @@protoc_insertion_point(field_mutable:Protocol.Book.time)
  return _internal_mutable_time();
}
inline const std::string& Book::_internal_time() const {
  return time_.GetNoArena();
}
inline void Book::_internal_set_time(const std::string& value) {
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Book::set_time(std::string&& value) {
  
  time_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.Book.time)
}
inline void Book::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.Book.time)
}
inline void Book::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.Book.time)
}
inline std::string* Book::_internal_mutable_time() {
  
  return time_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Book::release_time() {
  // @@protoc_insertion_point(field_release:Protocol.Book.time)
  
  return time_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Book::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:Protocol.Book.time)
}

// string BH = 3;
inline void Book::clear_bh() {
  bh_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Book::bh() const {
  // @@protoc_insertion_point(field_get:Protocol.Book.BH)
  return _internal_bh();
}
inline void Book::set_bh(const std::string& value) {
  _internal_set_bh(value);
  // @@protoc_insertion_point(field_set:Protocol.Book.BH)
}
inline std::string* Book::mutable_bh() {
  // @@protoc_insertion_point(field_mutable:Protocol.Book.BH)
  return _internal_mutable_bh();
}
inline const std::string& Book::_internal_bh() const {
  return bh_.GetNoArena();
}
inline void Book::_internal_set_bh(const std::string& value) {
  
  bh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Book::set_bh(std::string&& value) {
  
  bh_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.Book.BH)
}
inline void Book::set_bh(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.Book.BH)
}
inline void Book::set_bh(const char* value, size_t size) {
  
  bh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.Book.BH)
}
inline std::string* Book::_internal_mutable_bh() {
  
  return bh_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Book::release_bh() {
  // @@protoc_insertion_point(field_release:Protocol.Book.BH)
  
  return bh_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Book::set_allocated_bh(std::string* bh) {
  if (bh != nullptr) {
    
  } else {
    
  }
  bh_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bh);
  // @@protoc_insertion_point(field_set_allocated:Protocol.Book.BH)
}

// float price = 4;
inline void Book::clear_price() {
  price_ = 0;
}
inline float Book::_internal_price() const {
  return price_;
}
inline float Book::price() const {
  // @@protoc_insertion_point(field_get:Protocol.Book.price)
  return _internal_price();
}
inline void Book::_internal_set_price(float value) {
  
  price_ = value;
}
inline void Book::set_price(float value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:Protocol.Book.price)
}

// -------------------------------------------------------------------

// C2SBook

// int32 request = 1;
inline void C2SBook::clear_request() {
  request_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C2SBook::_internal_request() const {
  return request_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C2SBook::request() const {
  // @@protoc_insertion_point(field_get:Protocol.C2SBook.request)
  return _internal_request();
}
inline void C2SBook::_internal_set_request(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  request_ = value;
}
inline void C2SBook::set_request(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_request(value);
  // @@protoc_insertion_point(field_set:Protocol.C2SBook.request)
}

// -------------------------------------------------------------------

// S2CBook

// repeated .Protocol.Book bookList = 1;
inline int S2CBook::_internal_booklist_size() const {
  return booklist_.size();
}
inline int S2CBook::booklist_size() const {
  return _internal_booklist_size();
}
inline void S2CBook::clear_booklist() {
  booklist_.Clear();
}
inline ::Protocol::Book* S2CBook::mutable_booklist(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S2CBook.bookList)
  return booklist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Book >*
S2CBook::mutable_booklist() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2CBook.bookList)
  return &booklist_;
}
inline const ::Protocol::Book& S2CBook::_internal_booklist(int index) const {
  return booklist_.Get(index);
}
inline const ::Protocol::Book& S2CBook::booklist(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2CBook.bookList)
  return _internal_booklist(index);
}
inline ::Protocol::Book* S2CBook::_internal_add_booklist() {
  return booklist_.Add();
}
inline ::Protocol::Book* S2CBook::add_booklist() {
  // @@protoc_insertion_point(field_add:Protocol.S2CBook.bookList)
  return _internal_add_booklist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Book >&
S2CBook::booklist() const {
  // @@protoc_insertion_point(field_list:Protocol.S2CBook.bookList)
  return booklist_;
}

// -------------------------------------------------------------------

// C2SAddBooks

// repeated .Protocol.Book bookList = 1;
inline int C2SAddBooks::_internal_booklist_size() const {
  return booklist_.size();
}
inline int C2SAddBooks::booklist_size() const {
  return _internal_booklist_size();
}
inline void C2SAddBooks::clear_booklist() {
  booklist_.Clear();
}
inline ::Protocol::Book* C2SAddBooks::mutable_booklist(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.C2SAddBooks.bookList)
  return booklist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Book >*
C2SAddBooks::mutable_booklist() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.C2SAddBooks.bookList)
  return &booklist_;
}
inline const ::Protocol::Book& C2SAddBooks::_internal_booklist(int index) const {
  return booklist_.Get(index);
}
inline const ::Protocol::Book& C2SAddBooks::booklist(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.C2SAddBooks.bookList)
  return _internal_booklist(index);
}
inline ::Protocol::Book* C2SAddBooks::_internal_add_booklist() {
  return booklist_.Add();
}
inline ::Protocol::Book* C2SAddBooks::add_booklist() {
  // @@protoc_insertion_point(field_add:Protocol.C2SAddBooks.bookList)
  return _internal_add_booklist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Book >&
C2SAddBooks::booklist() const {
  // @@protoc_insertion_point(field_list:Protocol.C2SAddBooks.bookList)
  return booklist_;
}

// -------------------------------------------------------------------

// C2SDeleteBooks

// repeated string bhList = 1;
inline int C2SDeleteBooks::_internal_bhlist_size() const {
  return bhlist_.size();
}
inline int C2SDeleteBooks::bhlist_size() const {
  return _internal_bhlist_size();
}
inline void C2SDeleteBooks::clear_bhlist() {
  bhlist_.Clear();
}
inline std::string* C2SDeleteBooks::add_bhlist() {
  // @@protoc_insertion_point(field_add_mutable:Protocol.C2SDeleteBooks.bhList)
  return _internal_add_bhlist();
}
inline const std::string& C2SDeleteBooks::_internal_bhlist(int index) const {
  return bhlist_.Get(index);
}
inline const std::string& C2SDeleteBooks::bhlist(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.C2SDeleteBooks.bhList)
  return _internal_bhlist(index);
}
inline std::string* C2SDeleteBooks::mutable_bhlist(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.C2SDeleteBooks.bhList)
  return bhlist_.Mutable(index);
}
inline void C2SDeleteBooks::set_bhlist(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Protocol.C2SDeleteBooks.bhList)
  bhlist_.Mutable(index)->assign(value);
}
inline void C2SDeleteBooks::set_bhlist(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Protocol.C2SDeleteBooks.bhList)
  bhlist_.Mutable(index)->assign(std::move(value));
}
inline void C2SDeleteBooks::set_bhlist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bhlist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.C2SDeleteBooks.bhList)
}
inline void C2SDeleteBooks::set_bhlist(int index, const char* value, size_t size) {
  bhlist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.C2SDeleteBooks.bhList)
}
inline std::string* C2SDeleteBooks::_internal_add_bhlist() {
  return bhlist_.Add();
}
inline void C2SDeleteBooks::add_bhlist(const std::string& value) {
  bhlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Protocol.C2SDeleteBooks.bhList)
}
inline void C2SDeleteBooks::add_bhlist(std::string&& value) {
  bhlist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Protocol.C2SDeleteBooks.bhList)
}
inline void C2SDeleteBooks::add_bhlist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bhlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Protocol.C2SDeleteBooks.bhList)
}
inline void C2SDeleteBooks::add_bhlist(const char* value, size_t size) {
  bhlist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Protocol.C2SDeleteBooks.bhList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
C2SDeleteBooks::bhlist() const {
  // @@protoc_insertion_point(field_list:Protocol.C2SDeleteBooks.bhList)
  return bhlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
C2SDeleteBooks::mutable_bhlist() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.C2SDeleteBooks.bhList)
  return &bhlist_;
}

// -------------------------------------------------------------------

// UpdateBook

// string oldBH = 1;
inline void UpdateBook::clear_oldbh() {
  oldbh_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateBook::oldbh() const {
  // @@protoc_insertion_point(field_get:Protocol.UpdateBook.oldBH)
  return _internal_oldbh();
}
inline void UpdateBook::set_oldbh(const std::string& value) {
  _internal_set_oldbh(value);
  // @@protoc_insertion_point(field_set:Protocol.UpdateBook.oldBH)
}
inline std::string* UpdateBook::mutable_oldbh() {
  // @@protoc_insertion_point(field_mutable:Protocol.UpdateBook.oldBH)
  return _internal_mutable_oldbh();
}
inline const std::string& UpdateBook::_internal_oldbh() const {
  return oldbh_.GetNoArena();
}
inline void UpdateBook::_internal_set_oldbh(const std::string& value) {
  
  oldbh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpdateBook::set_oldbh(std::string&& value) {
  
  oldbh_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.UpdateBook.oldBH)
}
inline void UpdateBook::set_oldbh(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  oldbh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.UpdateBook.oldBH)
}
inline void UpdateBook::set_oldbh(const char* value, size_t size) {
  
  oldbh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.UpdateBook.oldBH)
}
inline std::string* UpdateBook::_internal_mutable_oldbh() {
  
  return oldbh_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateBook::release_oldbh() {
  // @@protoc_insertion_point(field_release:Protocol.UpdateBook.oldBH)
  
  return oldbh_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateBook::set_allocated_oldbh(std::string* oldbh) {
  if (oldbh != nullptr) {
    
  } else {
    
  }
  oldbh_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), oldbh);
  // @@protoc_insertion_point(field_set_allocated:Protocol.UpdateBook.oldBH)
}

// .Protocol.Book book = 2;
inline bool UpdateBook::_internal_has_book() const {
  return this != internal_default_instance() && book_ != nullptr;
}
inline bool UpdateBook::has_book() const {
  return _internal_has_book();
}
inline void UpdateBook::clear_book() {
  if (GetArenaNoVirtual() == nullptr && book_ != nullptr) {
    delete book_;
  }
  book_ = nullptr;
}
inline const ::Protocol::Book& UpdateBook::_internal_book() const {
  const ::Protocol::Book* p = book_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Protocol::Book*>(
      &::Protocol::_Book_default_instance_);
}
inline const ::Protocol::Book& UpdateBook::book() const {
  // @@protoc_insertion_point(field_get:Protocol.UpdateBook.book)
  return _internal_book();
}
inline ::Protocol::Book* UpdateBook::release_book() {
  // @@protoc_insertion_point(field_release:Protocol.UpdateBook.book)
  
  ::Protocol::Book* temp = book_;
  book_ = nullptr;
  return temp;
}
inline ::Protocol::Book* UpdateBook::_internal_mutable_book() {
  
  if (book_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Book>(GetArenaNoVirtual());
    book_ = p;
  }
  return book_;
}
inline ::Protocol::Book* UpdateBook::mutable_book() {
  // @@protoc_insertion_point(field_mutable:Protocol.UpdateBook.book)
  return _internal_mutable_book();
}
inline void UpdateBook::set_allocated_book(::Protocol::Book* book) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete book_;
  }
  if (book) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      book = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, book, submessage_arena);
    }
    
  } else {
    
  }
  book_ = book;
  // @@protoc_insertion_point(field_set_allocated:Protocol.UpdateBook.book)
}

// -------------------------------------------------------------------

// C2SUpdateBooks

// repeated .Protocol.UpdateBook bookList = 1;
inline int C2SUpdateBooks::_internal_booklist_size() const {
  return booklist_.size();
}
inline int C2SUpdateBooks::booklist_size() const {
  return _internal_booklist_size();
}
inline void C2SUpdateBooks::clear_booklist() {
  booklist_.Clear();
}
inline ::Protocol::UpdateBook* C2SUpdateBooks::mutable_booklist(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.C2SUpdateBooks.bookList)
  return booklist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UpdateBook >*
C2SUpdateBooks::mutable_booklist() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.C2SUpdateBooks.bookList)
  return &booklist_;
}
inline const ::Protocol::UpdateBook& C2SUpdateBooks::_internal_booklist(int index) const {
  return booklist_.Get(index);
}
inline const ::Protocol::UpdateBook& C2SUpdateBooks::booklist(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.C2SUpdateBooks.bookList)
  return _internal_booklist(index);
}
inline ::Protocol::UpdateBook* C2SUpdateBooks::_internal_add_booklist() {
  return booklist_.Add();
}
inline ::Protocol::UpdateBook* C2SUpdateBooks::add_booklist() {
  // @@protoc_insertion_point(field_add:Protocol.C2SUpdateBooks.bookList)
  return _internal_add_booklist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UpdateBook >&
C2SUpdateBooks::booklist() const {
  // @@protoc_insertion_point(field_list:Protocol.C2SUpdateBooks.bookList)
  return booklist_;
}

// -------------------------------------------------------------------

// YanTao

// string name = 1;
inline void YanTao::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& YanTao::name() const {
  // @@protoc_insertion_point(field_get:Protocol.YanTao.name)
  return _internal_name();
}
inline void YanTao::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Protocol.YanTao.name)
}
inline std::string* YanTao::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Protocol.YanTao.name)
  return _internal_mutable_name();
}
inline const std::string& YanTao::_internal_name() const {
  return name_.GetNoArena();
}
inline void YanTao::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void YanTao::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.YanTao.name)
}
inline void YanTao::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.YanTao.name)
}
inline void YanTao::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.YanTao.name)
}
inline std::string* YanTao::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* YanTao::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.YanTao.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void YanTao::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Protocol.YanTao.name)
}

// string content = 2;
inline void YanTao::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& YanTao::content() const {
  // @@protoc_insertion_point(field_get:Protocol.YanTao.content)
  return _internal_content();
}
inline void YanTao::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:Protocol.YanTao.content)
}
inline std::string* YanTao::mutable_content() {
  // @@protoc_insertion_point(field_mutable:Protocol.YanTao.content)
  return _internal_mutable_content();
}
inline const std::string& YanTao::_internal_content() const {
  return content_.GetNoArena();
}
inline void YanTao::_internal_set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void YanTao::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.YanTao.content)
}
inline void YanTao::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.YanTao.content)
}
inline void YanTao::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.YanTao.content)
}
inline std::string* YanTao::_internal_mutable_content() {
  
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* YanTao::release_content() {
  // @@protoc_insertion_point(field_release:Protocol.YanTao.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void YanTao::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:Protocol.YanTao.content)
}

// string time = 3;
inline void YanTao::clear_time() {
  time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& YanTao::time() const {
  // @@protoc_insertion_point(field_get:Protocol.YanTao.time)
  return _internal_time();
}
inline void YanTao::set_time(const std::string& value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:Protocol.YanTao.time)
}
inline std::string* YanTao::mutable_time() {
  // @@protoc_insertion_point(field_mutable:Protocol.YanTao.time)
  return _internal_mutable_time();
}
inline const std::string& YanTao::_internal_time() const {
  return time_.GetNoArena();
}
inline void YanTao::_internal_set_time(const std::string& value) {
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void YanTao::set_time(std::string&& value) {
  
  time_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.YanTao.time)
}
inline void YanTao::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.YanTao.time)
}
inline void YanTao::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.YanTao.time)
}
inline std::string* YanTao::_internal_mutable_time() {
  
  return time_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* YanTao::release_time() {
  // @@protoc_insertion_point(field_release:Protocol.YanTao.time)
  
  return time_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void YanTao::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:Protocol.YanTao.time)
}

// string address = 4;
inline void YanTao::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& YanTao::address() const {
  // @@protoc_insertion_point(field_get:Protocol.YanTao.address)
  return _internal_address();
}
inline void YanTao::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:Protocol.YanTao.address)
}
inline std::string* YanTao::mutable_address() {
  // @@protoc_insertion_point(field_mutable:Protocol.YanTao.address)
  return _internal_mutable_address();
}
inline const std::string& YanTao::_internal_address() const {
  return address_.GetNoArena();
}
inline void YanTao::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void YanTao::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.YanTao.address)
}
inline void YanTao::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.YanTao.address)
}
inline void YanTao::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.YanTao.address)
}
inline std::string* YanTao::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* YanTao::release_address() {
  // @@protoc_insertion_point(field_release:Protocol.YanTao.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void YanTao::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:Protocol.YanTao.address)
}

// -------------------------------------------------------------------

// C2SYanTao

// int32 request = 1;
inline void C2SYanTao::clear_request() {
  request_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C2SYanTao::_internal_request() const {
  return request_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C2SYanTao::request() const {
  // @@protoc_insertion_point(field_get:Protocol.C2SYanTao.request)
  return _internal_request();
}
inline void C2SYanTao::_internal_set_request(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  request_ = value;
}
inline void C2SYanTao::set_request(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_request(value);
  // @@protoc_insertion_point(field_set:Protocol.C2SYanTao.request)
}

// -------------------------------------------------------------------

// S2CYanTao

// repeated .Protocol.YanTao yanTaoList = 1;
inline int S2CYanTao::_internal_yantaolist_size() const {
  return yantaolist_.size();
}
inline int S2CYanTao::yantaolist_size() const {
  return _internal_yantaolist_size();
}
inline void S2CYanTao::clear_yantaolist() {
  yantaolist_.Clear();
}
inline ::Protocol::YanTao* S2CYanTao::mutable_yantaolist(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S2CYanTao.yanTaoList)
  return yantaolist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::YanTao >*
S2CYanTao::mutable_yantaolist() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2CYanTao.yanTaoList)
  return &yantaolist_;
}
inline const ::Protocol::YanTao& S2CYanTao::_internal_yantaolist(int index) const {
  return yantaolist_.Get(index);
}
inline const ::Protocol::YanTao& S2CYanTao::yantaolist(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2CYanTao.yanTaoList)
  return _internal_yantaolist(index);
}
inline ::Protocol::YanTao* S2CYanTao::_internal_add_yantaolist() {
  return yantaolist_.Add();
}
inline ::Protocol::YanTao* S2CYanTao::add_yantaolist() {
  // @@protoc_insertion_point(field_add:Protocol.S2CYanTao.yanTaoList)
  return _internal_add_yantaolist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::YanTao >&
S2CYanTao::yantaolist() const {
  // @@protoc_insertion_point(field_list:Protocol.S2CYanTao.yanTaoList)
  return yantaolist_;
}

// -------------------------------------------------------------------

// C2SAddYanTao

// repeated .Protocol.YanTao yanTaoList = 1;
inline int C2SAddYanTao::_internal_yantaolist_size() const {
  return yantaolist_.size();
}
inline int C2SAddYanTao::yantaolist_size() const {
  return _internal_yantaolist_size();
}
inline void C2SAddYanTao::clear_yantaolist() {
  yantaolist_.Clear();
}
inline ::Protocol::YanTao* C2SAddYanTao::mutable_yantaolist(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.C2SAddYanTao.yanTaoList)
  return yantaolist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::YanTao >*
C2SAddYanTao::mutable_yantaolist() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.C2SAddYanTao.yanTaoList)
  return &yantaolist_;
}
inline const ::Protocol::YanTao& C2SAddYanTao::_internal_yantaolist(int index) const {
  return yantaolist_.Get(index);
}
inline const ::Protocol::YanTao& C2SAddYanTao::yantaolist(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.C2SAddYanTao.yanTaoList)
  return _internal_yantaolist(index);
}
inline ::Protocol::YanTao* C2SAddYanTao::_internal_add_yantaolist() {
  return yantaolist_.Add();
}
inline ::Protocol::YanTao* C2SAddYanTao::add_yantaolist() {
  // @@protoc_insertion_point(field_add:Protocol.C2SAddYanTao.yanTaoList)
  return _internal_add_yantaolist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::YanTao >&
C2SAddYanTao::yantaolist() const {
  // @@protoc_insertion_point(field_list:Protocol.C2SAddYanTao.yanTaoList)
  return yantaolist_;
}

// -------------------------------------------------------------------

// UpdateYanTao

// .Protocol.YanTao yantao = 1;
inline bool UpdateYanTao::_internal_has_yantao() const {
  return this != internal_default_instance() && yantao_ != nullptr;
}
inline bool UpdateYanTao::has_yantao() const {
  return _internal_has_yantao();
}
inline void UpdateYanTao::clear_yantao() {
  if (GetArenaNoVirtual() == nullptr && yantao_ != nullptr) {
    delete yantao_;
  }
  yantao_ = nullptr;
}
inline const ::Protocol::YanTao& UpdateYanTao::_internal_yantao() const {
  const ::Protocol::YanTao* p = yantao_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Protocol::YanTao*>(
      &::Protocol::_YanTao_default_instance_);
}
inline const ::Protocol::YanTao& UpdateYanTao::yantao() const {
  // @@protoc_insertion_point(field_get:Protocol.UpdateYanTao.yantao)
  return _internal_yantao();
}
inline ::Protocol::YanTao* UpdateYanTao::release_yantao() {
  // @@protoc_insertion_point(field_release:Protocol.UpdateYanTao.yantao)
  
  ::Protocol::YanTao* temp = yantao_;
  yantao_ = nullptr;
  return temp;
}
inline ::Protocol::YanTao* UpdateYanTao::_internal_mutable_yantao() {
  
  if (yantao_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::YanTao>(GetArenaNoVirtual());
    yantao_ = p;
  }
  return yantao_;
}
inline ::Protocol::YanTao* UpdateYanTao::mutable_yantao() {
  // @@protoc_insertion_point(field_mutable:Protocol.UpdateYanTao.yantao)
  return _internal_mutable_yantao();
}
inline void UpdateYanTao::set_allocated_yantao(::Protocol::YanTao* yantao) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete yantao_;
  }
  if (yantao) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      yantao = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, yantao, submessage_arena);
    }
    
  } else {
    
  }
  yantao_ = yantao;
  // @@protoc_insertion_point(field_set_allocated:Protocol.UpdateYanTao.yantao)
}

// string oldName = 2;
inline void UpdateYanTao::clear_oldname() {
  oldname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateYanTao::oldname() const {
  // @@protoc_insertion_point(field_get:Protocol.UpdateYanTao.oldName)
  return _internal_oldname();
}
inline void UpdateYanTao::set_oldname(const std::string& value) {
  _internal_set_oldname(value);
  // @@protoc_insertion_point(field_set:Protocol.UpdateYanTao.oldName)
}
inline std::string* UpdateYanTao::mutable_oldname() {
  // @@protoc_insertion_point(field_mutable:Protocol.UpdateYanTao.oldName)
  return _internal_mutable_oldname();
}
inline const std::string& UpdateYanTao::_internal_oldname() const {
  return oldname_.GetNoArena();
}
inline void UpdateYanTao::_internal_set_oldname(const std::string& value) {
  
  oldname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpdateYanTao::set_oldname(std::string&& value) {
  
  oldname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.UpdateYanTao.oldName)
}
inline void UpdateYanTao::set_oldname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  oldname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.UpdateYanTao.oldName)
}
inline void UpdateYanTao::set_oldname(const char* value, size_t size) {
  
  oldname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.UpdateYanTao.oldName)
}
inline std::string* UpdateYanTao::_internal_mutable_oldname() {
  
  return oldname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateYanTao::release_oldname() {
  // @@protoc_insertion_point(field_release:Protocol.UpdateYanTao.oldName)
  
  return oldname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateYanTao::set_allocated_oldname(std::string* oldname) {
  if (oldname != nullptr) {
    
  } else {
    
  }
  oldname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), oldname);
  // @@protoc_insertion_point(field_set_allocated:Protocol.UpdateYanTao.oldName)
}

// -------------------------------------------------------------------

// C2SUpdateYanTao

// repeated .Protocol.UpdateYanTao yanTaoList = 1;
inline int C2SUpdateYanTao::_internal_yantaolist_size() const {
  return yantaolist_.size();
}
inline int C2SUpdateYanTao::yantaolist_size() const {
  return _internal_yantaolist_size();
}
inline void C2SUpdateYanTao::clear_yantaolist() {
  yantaolist_.Clear();
}
inline ::Protocol::UpdateYanTao* C2SUpdateYanTao::mutable_yantaolist(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.C2SUpdateYanTao.yanTaoList)
  return yantaolist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UpdateYanTao >*
C2SUpdateYanTao::mutable_yantaolist() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.C2SUpdateYanTao.yanTaoList)
  return &yantaolist_;
}
inline const ::Protocol::UpdateYanTao& C2SUpdateYanTao::_internal_yantaolist(int index) const {
  return yantaolist_.Get(index);
}
inline const ::Protocol::UpdateYanTao& C2SUpdateYanTao::yantaolist(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.C2SUpdateYanTao.yanTaoList)
  return _internal_yantaolist(index);
}
inline ::Protocol::UpdateYanTao* C2SUpdateYanTao::_internal_add_yantaolist() {
  return yantaolist_.Add();
}
inline ::Protocol::UpdateYanTao* C2SUpdateYanTao::add_yantaolist() {
  // @@protoc_insertion_point(field_add:Protocol.C2SUpdateYanTao.yanTaoList)
  return _internal_add_yantaolist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UpdateYanTao >&
C2SUpdateYanTao::yantaolist() const {
  // @@protoc_insertion_point(field_list:Protocol.C2SUpdateYanTao.yanTaoList)
  return yantaolist_;
}

// -------------------------------------------------------------------

// C2SDeleteYanTao

// repeated string name = 1;
inline int C2SDeleteYanTao::_internal_name_size() const {
  return name_.size();
}
inline int C2SDeleteYanTao::name_size() const {
  return _internal_name_size();
}
inline void C2SDeleteYanTao::clear_name() {
  name_.Clear();
}
inline std::string* C2SDeleteYanTao::add_name() {
  // @@protoc_insertion_point(field_add_mutable:Protocol.C2SDeleteYanTao.name)
  return _internal_add_name();
}
inline const std::string& C2SDeleteYanTao::_internal_name(int index) const {
  return name_.Get(index);
}
inline const std::string& C2SDeleteYanTao::name(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.C2SDeleteYanTao.name)
  return _internal_name(index);
}
inline std::string* C2SDeleteYanTao::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.C2SDeleteYanTao.name)
  return name_.Mutable(index);
}
inline void C2SDeleteYanTao::set_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Protocol.C2SDeleteYanTao.name)
  name_.Mutable(index)->assign(value);
}
inline void C2SDeleteYanTao::set_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Protocol.C2SDeleteYanTao.name)
  name_.Mutable(index)->assign(std::move(value));
}
inline void C2SDeleteYanTao::set_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.C2SDeleteYanTao.name)
}
inline void C2SDeleteYanTao::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.C2SDeleteYanTao.name)
}
inline std::string* C2SDeleteYanTao::_internal_add_name() {
  return name_.Add();
}
inline void C2SDeleteYanTao::add_name(const std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Protocol.C2SDeleteYanTao.name)
}
inline void C2SDeleteYanTao::add_name(std::string&& value) {
  name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Protocol.C2SDeleteYanTao.name)
}
inline void C2SDeleteYanTao::add_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Protocol.C2SDeleteYanTao.name)
}
inline void C2SDeleteYanTao::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Protocol.C2SDeleteYanTao.name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
C2SDeleteYanTao::name() const {
  // @@protoc_insertion_point(field_list:Protocol.C2SDeleteYanTao.name)
  return name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
C2SDeleteYanTao::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.C2SDeleteYanTao.name)
  return &name_;
}

// -------------------------------------------------------------------

// WeiWen

// string name = 1;
inline void WeiWen::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WeiWen::name() const {
  // @@protoc_insertion_point(field_get:Protocol.WeiWen.name)
  return _internal_name();
}
inline void WeiWen::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Protocol.WeiWen.name)
}
inline std::string* WeiWen::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Protocol.WeiWen.name)
  return _internal_mutable_name();
}
inline const std::string& WeiWen::_internal_name() const {
  return name_.GetNoArena();
}
inline void WeiWen::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WeiWen::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.WeiWen.name)
}
inline void WeiWen::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.WeiWen.name)
}
inline void WeiWen::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.WeiWen.name)
}
inline std::string* WeiWen::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WeiWen::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.WeiWen.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WeiWen::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Protocol.WeiWen.name)
}

// string time = 2;
inline void WeiWen::clear_time() {
  time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WeiWen::time() const {
  // @@protoc_insertion_point(field_get:Protocol.WeiWen.time)
  return _internal_time();
}
inline void WeiWen::set_time(const std::string& value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:Protocol.WeiWen.time)
}
inline std::string* WeiWen::mutable_time() {
  // @@protoc_insertion_point(field_mutable:Protocol.WeiWen.time)
  return _internal_mutable_time();
}
inline const std::string& WeiWen::_internal_time() const {
  return time_.GetNoArena();
}
inline void WeiWen::_internal_set_time(const std::string& value) {
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WeiWen::set_time(std::string&& value) {
  
  time_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.WeiWen.time)
}
inline void WeiWen::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.WeiWen.time)
}
inline void WeiWen::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.WeiWen.time)
}
inline std::string* WeiWen::_internal_mutable_time() {
  
  return time_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WeiWen::release_time() {
  // @@protoc_insertion_point(field_release:Protocol.WeiWen.time)
  
  return time_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WeiWen::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:Protocol.WeiWen.time)
}

// string address = 3;
inline void WeiWen::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WeiWen::address() const {
  // @@protoc_insertion_point(field_get:Protocol.WeiWen.address)
  return _internal_address();
}
inline void WeiWen::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:Protocol.WeiWen.address)
}
inline std::string* WeiWen::mutable_address() {
  // @@protoc_insertion_point(field_mutable:Protocol.WeiWen.address)
  return _internal_mutable_address();
}
inline const std::string& WeiWen::_internal_address() const {
  return address_.GetNoArena();
}
inline void WeiWen::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WeiWen::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.WeiWen.address)
}
inline void WeiWen::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.WeiWen.address)
}
inline void WeiWen::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.WeiWen.address)
}
inline std::string* WeiWen::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WeiWen::release_address() {
  // @@protoc_insertion_point(field_release:Protocol.WeiWen.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WeiWen::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:Protocol.WeiWen.address)
}

// -------------------------------------------------------------------

// C2SWeiWen

// int32 request = 1;
inline void C2SWeiWen::clear_request() {
  request_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C2SWeiWen::_internal_request() const {
  return request_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C2SWeiWen::request() const {
  // @@protoc_insertion_point(field_get:Protocol.C2SWeiWen.request)
  return _internal_request();
}
inline void C2SWeiWen::_internal_set_request(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  request_ = value;
}
inline void C2SWeiWen::set_request(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_request(value);
  // @@protoc_insertion_point(field_set:Protocol.C2SWeiWen.request)
}

// -------------------------------------------------------------------

// S2CWeiWen

// repeated .Protocol.WeiWen weiWenList = 1;
inline int S2CWeiWen::_internal_weiwenlist_size() const {
  return weiwenlist_.size();
}
inline int S2CWeiWen::weiwenlist_size() const {
  return _internal_weiwenlist_size();
}
inline void S2CWeiWen::clear_weiwenlist() {
  weiwenlist_.Clear();
}
inline ::Protocol::WeiWen* S2CWeiWen::mutable_weiwenlist(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S2CWeiWen.weiWenList)
  return weiwenlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::WeiWen >*
S2CWeiWen::mutable_weiwenlist() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2CWeiWen.weiWenList)
  return &weiwenlist_;
}
inline const ::Protocol::WeiWen& S2CWeiWen::_internal_weiwenlist(int index) const {
  return weiwenlist_.Get(index);
}
inline const ::Protocol::WeiWen& S2CWeiWen::weiwenlist(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2CWeiWen.weiWenList)
  return _internal_weiwenlist(index);
}
inline ::Protocol::WeiWen* S2CWeiWen::_internal_add_weiwenlist() {
  return weiwenlist_.Add();
}
inline ::Protocol::WeiWen* S2CWeiWen::add_weiwenlist() {
  // @@protoc_insertion_point(field_add:Protocol.S2CWeiWen.weiWenList)
  return _internal_add_weiwenlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::WeiWen >&
S2CWeiWen::weiwenlist() const {
  // @@protoc_insertion_point(field_list:Protocol.S2CWeiWen.weiWenList)
  return weiwenlist_;
}

// -------------------------------------------------------------------

// C2SAddWeiWen

// repeated .Protocol.WeiWen weiWenList = 1;
inline int C2SAddWeiWen::_internal_weiwenlist_size() const {
  return weiwenlist_.size();
}
inline int C2SAddWeiWen::weiwenlist_size() const {
  return _internal_weiwenlist_size();
}
inline void C2SAddWeiWen::clear_weiwenlist() {
  weiwenlist_.Clear();
}
inline ::Protocol::WeiWen* C2SAddWeiWen::mutable_weiwenlist(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.C2SAddWeiWen.weiWenList)
  return weiwenlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::WeiWen >*
C2SAddWeiWen::mutable_weiwenlist() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.C2SAddWeiWen.weiWenList)
  return &weiwenlist_;
}
inline const ::Protocol::WeiWen& C2SAddWeiWen::_internal_weiwenlist(int index) const {
  return weiwenlist_.Get(index);
}
inline const ::Protocol::WeiWen& C2SAddWeiWen::weiwenlist(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.C2SAddWeiWen.weiWenList)
  return _internal_weiwenlist(index);
}
inline ::Protocol::WeiWen* C2SAddWeiWen::_internal_add_weiwenlist() {
  return weiwenlist_.Add();
}
inline ::Protocol::WeiWen* C2SAddWeiWen::add_weiwenlist() {
  // @@protoc_insertion_point(field_add:Protocol.C2SAddWeiWen.weiWenList)
  return _internal_add_weiwenlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::WeiWen >&
C2SAddWeiWen::weiwenlist() const {
  // @@protoc_insertion_point(field_list:Protocol.C2SAddWeiWen.weiWenList)
  return weiwenlist_;
}

// -------------------------------------------------------------------

// UpdateWeiWen

// .Protocol.WeiWen weiwen = 1;
inline bool UpdateWeiWen::_internal_has_weiwen() const {
  return this != internal_default_instance() && weiwen_ != nullptr;
}
inline bool UpdateWeiWen::has_weiwen() const {
  return _internal_has_weiwen();
}
inline void UpdateWeiWen::clear_weiwen() {
  if (GetArenaNoVirtual() == nullptr && weiwen_ != nullptr) {
    delete weiwen_;
  }
  weiwen_ = nullptr;
}
inline const ::Protocol::WeiWen& UpdateWeiWen::_internal_weiwen() const {
  const ::Protocol::WeiWen* p = weiwen_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Protocol::WeiWen*>(
      &::Protocol::_WeiWen_default_instance_);
}
inline const ::Protocol::WeiWen& UpdateWeiWen::weiwen() const {
  // @@protoc_insertion_point(field_get:Protocol.UpdateWeiWen.weiwen)
  return _internal_weiwen();
}
inline ::Protocol::WeiWen* UpdateWeiWen::release_weiwen() {
  // @@protoc_insertion_point(field_release:Protocol.UpdateWeiWen.weiwen)
  
  ::Protocol::WeiWen* temp = weiwen_;
  weiwen_ = nullptr;
  return temp;
}
inline ::Protocol::WeiWen* UpdateWeiWen::_internal_mutable_weiwen() {
  
  if (weiwen_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::WeiWen>(GetArenaNoVirtual());
    weiwen_ = p;
  }
  return weiwen_;
}
inline ::Protocol::WeiWen* UpdateWeiWen::mutable_weiwen() {
  // @@protoc_insertion_point(field_mutable:Protocol.UpdateWeiWen.weiwen)
  return _internal_mutable_weiwen();
}
inline void UpdateWeiWen::set_allocated_weiwen(::Protocol::WeiWen* weiwen) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete weiwen_;
  }
  if (weiwen) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      weiwen = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weiwen, submessage_arena);
    }
    
  } else {
    
  }
  weiwen_ = weiwen;
  // @@protoc_insertion_point(field_set_allocated:Protocol.UpdateWeiWen.weiwen)
}

// string oldName = 2;
inline void UpdateWeiWen::clear_oldname() {
  oldname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateWeiWen::oldname() const {
  // @@protoc_insertion_point(field_get:Protocol.UpdateWeiWen.oldName)
  return _internal_oldname();
}
inline void UpdateWeiWen::set_oldname(const std::string& value) {
  _internal_set_oldname(value);
  // @@protoc_insertion_point(field_set:Protocol.UpdateWeiWen.oldName)
}
inline std::string* UpdateWeiWen::mutable_oldname() {
  // @@protoc_insertion_point(field_mutable:Protocol.UpdateWeiWen.oldName)
  return _internal_mutable_oldname();
}
inline const std::string& UpdateWeiWen::_internal_oldname() const {
  return oldname_.GetNoArena();
}
inline void UpdateWeiWen::_internal_set_oldname(const std::string& value) {
  
  oldname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpdateWeiWen::set_oldname(std::string&& value) {
  
  oldname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.UpdateWeiWen.oldName)
}
inline void UpdateWeiWen::set_oldname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  oldname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.UpdateWeiWen.oldName)
}
inline void UpdateWeiWen::set_oldname(const char* value, size_t size) {
  
  oldname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.UpdateWeiWen.oldName)
}
inline std::string* UpdateWeiWen::_internal_mutable_oldname() {
  
  return oldname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateWeiWen::release_oldname() {
  // @@protoc_insertion_point(field_release:Protocol.UpdateWeiWen.oldName)
  
  return oldname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateWeiWen::set_allocated_oldname(std::string* oldname) {
  if (oldname != nullptr) {
    
  } else {
    
  }
  oldname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), oldname);
  // @@protoc_insertion_point(field_set_allocated:Protocol.UpdateWeiWen.oldName)
}

// -------------------------------------------------------------------

// C2SUpdateWeiWen

// repeated .Protocol.UpdateWeiWen weiWenList = 1;
inline int C2SUpdateWeiWen::_internal_weiwenlist_size() const {
  return weiwenlist_.size();
}
inline int C2SUpdateWeiWen::weiwenlist_size() const {
  return _internal_weiwenlist_size();
}
inline void C2SUpdateWeiWen::clear_weiwenlist() {
  weiwenlist_.Clear();
}
inline ::Protocol::UpdateWeiWen* C2SUpdateWeiWen::mutable_weiwenlist(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.C2SUpdateWeiWen.weiWenList)
  return weiwenlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UpdateWeiWen >*
C2SUpdateWeiWen::mutable_weiwenlist() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.C2SUpdateWeiWen.weiWenList)
  return &weiwenlist_;
}
inline const ::Protocol::UpdateWeiWen& C2SUpdateWeiWen::_internal_weiwenlist(int index) const {
  return weiwenlist_.Get(index);
}
inline const ::Protocol::UpdateWeiWen& C2SUpdateWeiWen::weiwenlist(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.C2SUpdateWeiWen.weiWenList)
  return _internal_weiwenlist(index);
}
inline ::Protocol::UpdateWeiWen* C2SUpdateWeiWen::_internal_add_weiwenlist() {
  return weiwenlist_.Add();
}
inline ::Protocol::UpdateWeiWen* C2SUpdateWeiWen::add_weiwenlist() {
  // @@protoc_insertion_point(field_add:Protocol.C2SUpdateWeiWen.weiWenList)
  return _internal_add_weiwenlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UpdateWeiWen >&
C2SUpdateWeiWen::weiwenlist() const {
  // @@protoc_insertion_point(field_list:Protocol.C2SUpdateWeiWen.weiWenList)
  return weiwenlist_;
}

// -------------------------------------------------------------------

// C2SDeleteWeiWen

// repeated string name = 1;
inline int C2SDeleteWeiWen::_internal_name_size() const {
  return name_.size();
}
inline int C2SDeleteWeiWen::name_size() const {
  return _internal_name_size();
}
inline void C2SDeleteWeiWen::clear_name() {
  name_.Clear();
}
inline std::string* C2SDeleteWeiWen::add_name() {
  // @@protoc_insertion_point(field_add_mutable:Protocol.C2SDeleteWeiWen.name)
  return _internal_add_name();
}
inline const std::string& C2SDeleteWeiWen::_internal_name(int index) const {
  return name_.Get(index);
}
inline const std::string& C2SDeleteWeiWen::name(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.C2SDeleteWeiWen.name)
  return _internal_name(index);
}
inline std::string* C2SDeleteWeiWen::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.C2SDeleteWeiWen.name)
  return name_.Mutable(index);
}
inline void C2SDeleteWeiWen::set_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Protocol.C2SDeleteWeiWen.name)
  name_.Mutable(index)->assign(value);
}
inline void C2SDeleteWeiWen::set_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Protocol.C2SDeleteWeiWen.name)
  name_.Mutable(index)->assign(std::move(value));
}
inline void C2SDeleteWeiWen::set_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.C2SDeleteWeiWen.name)
}
inline void C2SDeleteWeiWen::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.C2SDeleteWeiWen.name)
}
inline std::string* C2SDeleteWeiWen::_internal_add_name() {
  return name_.Add();
}
inline void C2SDeleteWeiWen::add_name(const std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Protocol.C2SDeleteWeiWen.name)
}
inline void C2SDeleteWeiWen::add_name(std::string&& value) {
  name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Protocol.C2SDeleteWeiWen.name)
}
inline void C2SDeleteWeiWen::add_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Protocol.C2SDeleteWeiWen.name)
}
inline void C2SDeleteWeiWen::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Protocol.C2SDeleteWeiWen.name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
C2SDeleteWeiWen::name() const {
  // @@protoc_insertion_point(field_list:Protocol.C2SDeleteWeiWen.name)
  return name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
C2SDeleteWeiWen::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.C2SDeleteWeiWen.name)
  return &name_;
}

// -------------------------------------------------------------------

// WriteBook

// string BBH = 1;
inline void WriteBook::clear_bbh() {
  bbh_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WriteBook::bbh() const {
  // @@protoc_insertion_point(field_get:Protocol.WriteBook.BBH)
  return _internal_bbh();
}
inline void WriteBook::set_bbh(const std::string& value) {
  _internal_set_bbh(value);
  // @@protoc_insertion_point(field_set:Protocol.WriteBook.BBH)
}
inline std::string* WriteBook::mutable_bbh() {
  // @@protoc_insertion_point(field_mutable:Protocol.WriteBook.BBH)
  return _internal_mutable_bbh();
}
inline const std::string& WriteBook::_internal_bbh() const {
  return bbh_.GetNoArena();
}
inline void WriteBook::_internal_set_bbh(const std::string& value) {
  
  bbh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WriteBook::set_bbh(std::string&& value) {
  
  bbh_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.WriteBook.BBH)
}
inline void WriteBook::set_bbh(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bbh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.WriteBook.BBH)
}
inline void WriteBook::set_bbh(const char* value, size_t size) {
  
  bbh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.WriteBook.BBH)
}
inline std::string* WriteBook::_internal_mutable_bbh() {
  
  return bbh_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WriteBook::release_bbh() {
  // @@protoc_insertion_point(field_release:Protocol.WriteBook.BBH)
  
  return bbh_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WriteBook::set_allocated_bbh(std::string* bbh) {
  if (bbh != nullptr) {
    
  } else {
    
  }
  bbh_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bbh);
  // @@protoc_insertion_point(field_set_allocated:Protocol.WriteBook.BBH)
}

// string SBH = 2;
inline void WriteBook::clear_sbh() {
  sbh_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WriteBook::sbh() const {
  // @@protoc_insertion_point(field_get:Protocol.WriteBook.SBH)
  return _internal_sbh();
}
inline void WriteBook::set_sbh(const std::string& value) {
  _internal_set_sbh(value);
  // @@protoc_insertion_point(field_set:Protocol.WriteBook.SBH)
}
inline std::string* WriteBook::mutable_sbh() {
  // @@protoc_insertion_point(field_mutable:Protocol.WriteBook.SBH)
  return _internal_mutable_sbh();
}
inline const std::string& WriteBook::_internal_sbh() const {
  return sbh_.GetNoArena();
}
inline void WriteBook::_internal_set_sbh(const std::string& value) {
  
  sbh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WriteBook::set_sbh(std::string&& value) {
  
  sbh_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.WriteBook.SBH)
}
inline void WriteBook::set_sbh(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sbh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.WriteBook.SBH)
}
inline void WriteBook::set_sbh(const char* value, size_t size) {
  
  sbh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.WriteBook.SBH)
}
inline std::string* WriteBook::_internal_mutable_sbh() {
  
  return sbh_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WriteBook::release_sbh() {
  // @@protoc_insertion_point(field_release:Protocol.WriteBook.SBH)
  
  return sbh_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WriteBook::set_allocated_sbh(std::string* sbh) {
  if (sbh != nullptr) {
    
  } else {
    
  }
  sbh_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sbh);
  // @@protoc_insertion_point(field_set_allocated:Protocol.WriteBook.SBH)
}

// -------------------------------------------------------------------

// C2SWriteBook

// int32 request = 1;
inline void C2SWriteBook::clear_request() {
  request_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C2SWriteBook::_internal_request() const {
  return request_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C2SWriteBook::request() const {
  // @@protoc_insertion_point(field_get:Protocol.C2SWriteBook.request)
  return _internal_request();
}
inline void C2SWriteBook::_internal_set_request(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  request_ = value;
}
inline void C2SWriteBook::set_request(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_request(value);
  // @@protoc_insertion_point(field_set:Protocol.C2SWriteBook.request)
}

// -------------------------------------------------------------------

// S2CWriteBook

// repeated .Protocol.Book writeBookList = 1;
inline int S2CWriteBook::_internal_writebooklist_size() const {
  return writebooklist_.size();
}
inline int S2CWriteBook::writebooklist_size() const {
  return _internal_writebooklist_size();
}
inline void S2CWriteBook::clear_writebooklist() {
  writebooklist_.Clear();
}
inline ::Protocol::Book* S2CWriteBook::mutable_writebooklist(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S2CWriteBook.writeBookList)
  return writebooklist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Book >*
S2CWriteBook::mutable_writebooklist() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2CWriteBook.writeBookList)
  return &writebooklist_;
}
inline const ::Protocol::Book& S2CWriteBook::_internal_writebooklist(int index) const {
  return writebooklist_.Get(index);
}
inline const ::Protocol::Book& S2CWriteBook::writebooklist(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2CWriteBook.writeBookList)
  return _internal_writebooklist(index);
}
inline ::Protocol::Book* S2CWriteBook::_internal_add_writebooklist() {
  return writebooklist_.Add();
}
inline ::Protocol::Book* S2CWriteBook::add_writebooklist() {
  // @@protoc_insertion_point(field_add:Protocol.S2CWriteBook.writeBookList)
  return _internal_add_writebooklist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Book >&
S2CWriteBook::writebooklist() const {
  // @@protoc_insertion_point(field_list:Protocol.S2CWriteBook.writeBookList)
  return writebooklist_;
}

// -------------------------------------------------------------------

// C2SSearchWriteBook

// int32 request = 1;
inline void C2SSearchWriteBook::clear_request() {
  request_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C2SSearchWriteBook::_internal_request() const {
  return request_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C2SSearchWriteBook::request() const {
  // @@protoc_insertion_point(field_get:Protocol.C2SSearchWriteBook.request)
  return _internal_request();
}
inline void C2SSearchWriteBook::_internal_set_request(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  request_ = value;
}
inline void C2SSearchWriteBook::set_request(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_request(value);
  // @@protoc_insertion_point(field_set:Protocol.C2SSearchWriteBook.request)
}

// -------------------------------------------------------------------

// S2CSearchWriteBook

// repeated .Protocol.WriteBook writeBookList = 1;
inline int S2CSearchWriteBook::_internal_writebooklist_size() const {
  return writebooklist_.size();
}
inline int S2CSearchWriteBook::writebooklist_size() const {
  return _internal_writebooklist_size();
}
inline void S2CSearchWriteBook::clear_writebooklist() {
  writebooklist_.Clear();
}
inline ::Protocol::WriteBook* S2CSearchWriteBook::mutable_writebooklist(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S2CSearchWriteBook.writeBookList)
  return writebooklist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::WriteBook >*
S2CSearchWriteBook::mutable_writebooklist() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2CSearchWriteBook.writeBookList)
  return &writebooklist_;
}
inline const ::Protocol::WriteBook& S2CSearchWriteBook::_internal_writebooklist(int index) const {
  return writebooklist_.Get(index);
}
inline const ::Protocol::WriteBook& S2CSearchWriteBook::writebooklist(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2CSearchWriteBook.writeBookList)
  return _internal_writebooklist(index);
}
inline ::Protocol::WriteBook* S2CSearchWriteBook::_internal_add_writebooklist() {
  return writebooklist_.Add();
}
inline ::Protocol::WriteBook* S2CSearchWriteBook::add_writebooklist() {
  // @@protoc_insertion_point(field_add:Protocol.S2CSearchWriteBook.writeBookList)
  return _internal_add_writebooklist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::WriteBook >&
S2CSearchWriteBook::writebooklist() const {
  // @@protoc_insertion_point(field_list:Protocol.S2CSearchWriteBook.writeBookList)
  return writebooklist_;
}

// -------------------------------------------------------------------

// C2SAddWriteBook

// repeated .Protocol.WriteBook writeBookList = 1;
inline int C2SAddWriteBook::_internal_writebooklist_size() const {
  return writebooklist_.size();
}
inline int C2SAddWriteBook::writebooklist_size() const {
  return _internal_writebooklist_size();
}
inline void C2SAddWriteBook::clear_writebooklist() {
  writebooklist_.Clear();
}
inline ::Protocol::WriteBook* C2SAddWriteBook::mutable_writebooklist(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.C2SAddWriteBook.writeBookList)
  return writebooklist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::WriteBook >*
C2SAddWriteBook::mutable_writebooklist() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.C2SAddWriteBook.writeBookList)
  return &writebooklist_;
}
inline const ::Protocol::WriteBook& C2SAddWriteBook::_internal_writebooklist(int index) const {
  return writebooklist_.Get(index);
}
inline const ::Protocol::WriteBook& C2SAddWriteBook::writebooklist(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.C2SAddWriteBook.writeBookList)
  return _internal_writebooklist(index);
}
inline ::Protocol::WriteBook* C2SAddWriteBook::_internal_add_writebooklist() {
  return writebooklist_.Add();
}
inline ::Protocol::WriteBook* C2SAddWriteBook::add_writebooklist() {
  // @@protoc_insertion_point(field_add:Protocol.C2SAddWriteBook.writeBookList)
  return _internal_add_writebooklist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::WriteBook >&
C2SAddWriteBook::writebooklist() const {
  // @@protoc_insertion_point(field_list:Protocol.C2SAddWriteBook.writeBookList)
  return writebooklist_;
}

// -------------------------------------------------------------------

// DoYanTao

// string name = 1;
inline void DoYanTao::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoYanTao::name() const {
  // @@protoc_insertion_point(field_get:Protocol.DoYanTao.name)
  return _internal_name();
}
inline void DoYanTao::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Protocol.DoYanTao.name)
}
inline std::string* DoYanTao::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Protocol.DoYanTao.name)
  return _internal_mutable_name();
}
inline const std::string& DoYanTao::_internal_name() const {
  return name_.GetNoArena();
}
inline void DoYanTao::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DoYanTao::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.DoYanTao.name)
}
inline void DoYanTao::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.DoYanTao.name)
}
inline void DoYanTao::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.DoYanTao.name)
}
inline std::string* DoYanTao::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoYanTao::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.DoYanTao.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoYanTao::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Protocol.DoYanTao.name)
}

// string SBH = 2;
inline void DoYanTao::clear_sbh() {
  sbh_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoYanTao::sbh() const {
  // @@protoc_insertion_point(field_get:Protocol.DoYanTao.SBH)
  return _internal_sbh();
}
inline void DoYanTao::set_sbh(const std::string& value) {
  _internal_set_sbh(value);
  // @@protoc_insertion_point(field_set:Protocol.DoYanTao.SBH)
}
inline std::string* DoYanTao::mutable_sbh() {
  // @@protoc_insertion_point(field_mutable:Protocol.DoYanTao.SBH)
  return _internal_mutable_sbh();
}
inline const std::string& DoYanTao::_internal_sbh() const {
  return sbh_.GetNoArena();
}
inline void DoYanTao::_internal_set_sbh(const std::string& value) {
  
  sbh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DoYanTao::set_sbh(std::string&& value) {
  
  sbh_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.DoYanTao.SBH)
}
inline void DoYanTao::set_sbh(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sbh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.DoYanTao.SBH)
}
inline void DoYanTao::set_sbh(const char* value, size_t size) {
  
  sbh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.DoYanTao.SBH)
}
inline std::string* DoYanTao::_internal_mutable_sbh() {
  
  return sbh_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoYanTao::release_sbh() {
  // @@protoc_insertion_point(field_release:Protocol.DoYanTao.SBH)
  
  return sbh_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoYanTao::set_allocated_sbh(std::string* sbh) {
  if (sbh != nullptr) {
    
  } else {
    
  }
  sbh_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sbh);
  // @@protoc_insertion_point(field_set_allocated:Protocol.DoYanTao.SBH)
}

// -------------------------------------------------------------------

// C2SDoYanTao

// int32 request = 1;
inline void C2SDoYanTao::clear_request() {
  request_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C2SDoYanTao::_internal_request() const {
  return request_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C2SDoYanTao::request() const {
  // @@protoc_insertion_point(field_get:Protocol.C2SDoYanTao.request)
  return _internal_request();
}
inline void C2SDoYanTao::_internal_set_request(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  request_ = value;
}
inline void C2SDoYanTao::set_request(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_request(value);
  // @@protoc_insertion_point(field_set:Protocol.C2SDoYanTao.request)
}

// -------------------------------------------------------------------

// S2CDoYanTao

// repeated .Protocol.YanTao doYanTaoList = 1;
inline int S2CDoYanTao::_internal_doyantaolist_size() const {
  return doyantaolist_.size();
}
inline int S2CDoYanTao::doyantaolist_size() const {
  return _internal_doyantaolist_size();
}
inline void S2CDoYanTao::clear_doyantaolist() {
  doyantaolist_.Clear();
}
inline ::Protocol::YanTao* S2CDoYanTao::mutable_doyantaolist(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S2CDoYanTao.doYanTaoList)
  return doyantaolist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::YanTao >*
S2CDoYanTao::mutable_doyantaolist() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2CDoYanTao.doYanTaoList)
  return &doyantaolist_;
}
inline const ::Protocol::YanTao& S2CDoYanTao::_internal_doyantaolist(int index) const {
  return doyantaolist_.Get(index);
}
inline const ::Protocol::YanTao& S2CDoYanTao::doyantaolist(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2CDoYanTao.doYanTaoList)
  return _internal_doyantaolist(index);
}
inline ::Protocol::YanTao* S2CDoYanTao::_internal_add_doyantaolist() {
  return doyantaolist_.Add();
}
inline ::Protocol::YanTao* S2CDoYanTao::add_doyantaolist() {
  // @@protoc_insertion_point(field_add:Protocol.S2CDoYanTao.doYanTaoList)
  return _internal_add_doyantaolist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::YanTao >&
S2CDoYanTao::doyantaolist() const {
  // @@protoc_insertion_point(field_list:Protocol.S2CDoYanTao.doYanTaoList)
  return doyantaolist_;
}

// -------------------------------------------------------------------

// C2SSearchDoYanTao

// int32 request = 1;
inline void C2SSearchDoYanTao::clear_request() {
  request_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C2SSearchDoYanTao::_internal_request() const {
  return request_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C2SSearchDoYanTao::request() const {
  // @@protoc_insertion_point(field_get:Protocol.C2SSearchDoYanTao.request)
  return _internal_request();
}
inline void C2SSearchDoYanTao::_internal_set_request(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  request_ = value;
}
inline void C2SSearchDoYanTao::set_request(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_request(value);
  // @@protoc_insertion_point(field_set:Protocol.C2SSearchDoYanTao.request)
}

// -------------------------------------------------------------------

// S2CSearchDoYanTao

// repeated .Protocol.DoYanTao doYanTaoList = 1;
inline int S2CSearchDoYanTao::_internal_doyantaolist_size() const {
  return doyantaolist_.size();
}
inline int S2CSearchDoYanTao::doyantaolist_size() const {
  return _internal_doyantaolist_size();
}
inline void S2CSearchDoYanTao::clear_doyantaolist() {
  doyantaolist_.Clear();
}
inline ::Protocol::DoYanTao* S2CSearchDoYanTao::mutable_doyantaolist(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S2CSearchDoYanTao.doYanTaoList)
  return doyantaolist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::DoYanTao >*
S2CSearchDoYanTao::mutable_doyantaolist() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2CSearchDoYanTao.doYanTaoList)
  return &doyantaolist_;
}
inline const ::Protocol::DoYanTao& S2CSearchDoYanTao::_internal_doyantaolist(int index) const {
  return doyantaolist_.Get(index);
}
inline const ::Protocol::DoYanTao& S2CSearchDoYanTao::doyantaolist(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2CSearchDoYanTao.doYanTaoList)
  return _internal_doyantaolist(index);
}
inline ::Protocol::DoYanTao* S2CSearchDoYanTao::_internal_add_doyantaolist() {
  return doyantaolist_.Add();
}
inline ::Protocol::DoYanTao* S2CSearchDoYanTao::add_doyantaolist() {
  // @@protoc_insertion_point(field_add:Protocol.S2CSearchDoYanTao.doYanTaoList)
  return _internal_add_doyantaolist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::DoYanTao >&
S2CSearchDoYanTao::doyantaolist() const {
  // @@protoc_insertion_point(field_list:Protocol.S2CSearchDoYanTao.doYanTaoList)
  return doyantaolist_;
}

// -------------------------------------------------------------------

// C2SAddDoYanTao

// repeated .Protocol.DoYanTao doYanTaoList = 1;
inline int C2SAddDoYanTao::_internal_doyantaolist_size() const {
  return doyantaolist_.size();
}
inline int C2SAddDoYanTao::doyantaolist_size() const {
  return _internal_doyantaolist_size();
}
inline void C2SAddDoYanTao::clear_doyantaolist() {
  doyantaolist_.Clear();
}
inline ::Protocol::DoYanTao* C2SAddDoYanTao::mutable_doyantaolist(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.C2SAddDoYanTao.doYanTaoList)
  return doyantaolist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::DoYanTao >*
C2SAddDoYanTao::mutable_doyantaolist() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.C2SAddDoYanTao.doYanTaoList)
  return &doyantaolist_;
}
inline const ::Protocol::DoYanTao& C2SAddDoYanTao::_internal_doyantaolist(int index) const {
  return doyantaolist_.Get(index);
}
inline const ::Protocol::DoYanTao& C2SAddDoYanTao::doyantaolist(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.C2SAddDoYanTao.doYanTaoList)
  return _internal_doyantaolist(index);
}
inline ::Protocol::DoYanTao* C2SAddDoYanTao::_internal_add_doyantaolist() {
  return doyantaolist_.Add();
}
inline ::Protocol::DoYanTao* C2SAddDoYanTao::add_doyantaolist() {
  // @@protoc_insertion_point(field_add:Protocol.C2SAddDoYanTao.doYanTaoList)
  return _internal_add_doyantaolist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::DoYanTao >&
C2SAddDoYanTao::doyantaolist() const {
  // @@protoc_insertion_point(field_list:Protocol.C2SAddDoYanTao.doYanTaoList)
  return doyantaolist_;
}

// -------------------------------------------------------------------

// UpdateDoYanTao

// .Protocol.DoYanTao yantao = 1;
inline bool UpdateDoYanTao::_internal_has_yantao() const {
  return this != internal_default_instance() && yantao_ != nullptr;
}
inline bool UpdateDoYanTao::has_yantao() const {
  return _internal_has_yantao();
}
inline void UpdateDoYanTao::clear_yantao() {
  if (GetArenaNoVirtual() == nullptr && yantao_ != nullptr) {
    delete yantao_;
  }
  yantao_ = nullptr;
}
inline const ::Protocol::DoYanTao& UpdateDoYanTao::_internal_yantao() const {
  const ::Protocol::DoYanTao* p = yantao_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Protocol::DoYanTao*>(
      &::Protocol::_DoYanTao_default_instance_);
}
inline const ::Protocol::DoYanTao& UpdateDoYanTao::yantao() const {
  // @@protoc_insertion_point(field_get:Protocol.UpdateDoYanTao.yantao)
  return _internal_yantao();
}
inline ::Protocol::DoYanTao* UpdateDoYanTao::release_yantao() {
  // @@protoc_insertion_point(field_release:Protocol.UpdateDoYanTao.yantao)
  
  ::Protocol::DoYanTao* temp = yantao_;
  yantao_ = nullptr;
  return temp;
}
inline ::Protocol::DoYanTao* UpdateDoYanTao::_internal_mutable_yantao() {
  
  if (yantao_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::DoYanTao>(GetArenaNoVirtual());
    yantao_ = p;
  }
  return yantao_;
}
inline ::Protocol::DoYanTao* UpdateDoYanTao::mutable_yantao() {
  // @@protoc_insertion_point(field_mutable:Protocol.UpdateDoYanTao.yantao)
  return _internal_mutable_yantao();
}
inline void UpdateDoYanTao::set_allocated_yantao(::Protocol::DoYanTao* yantao) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete yantao_;
  }
  if (yantao) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      yantao = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, yantao, submessage_arena);
    }
    
  } else {
    
  }
  yantao_ = yantao;
  // @@protoc_insertion_point(field_set_allocated:Protocol.UpdateDoYanTao.yantao)
}

// string oldName = 2;
inline void UpdateDoYanTao::clear_oldname() {
  oldname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateDoYanTao::oldname() const {
  // @@protoc_insertion_point(field_get:Protocol.UpdateDoYanTao.oldName)
  return _internal_oldname();
}
inline void UpdateDoYanTao::set_oldname(const std::string& value) {
  _internal_set_oldname(value);
  // @@protoc_insertion_point(field_set:Protocol.UpdateDoYanTao.oldName)
}
inline std::string* UpdateDoYanTao::mutable_oldname() {
  // @@protoc_insertion_point(field_mutable:Protocol.UpdateDoYanTao.oldName)
  return _internal_mutable_oldname();
}
inline const std::string& UpdateDoYanTao::_internal_oldname() const {
  return oldname_.GetNoArena();
}
inline void UpdateDoYanTao::_internal_set_oldname(const std::string& value) {
  
  oldname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpdateDoYanTao::set_oldname(std::string&& value) {
  
  oldname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.UpdateDoYanTao.oldName)
}
inline void UpdateDoYanTao::set_oldname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  oldname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.UpdateDoYanTao.oldName)
}
inline void UpdateDoYanTao::set_oldname(const char* value, size_t size) {
  
  oldname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.UpdateDoYanTao.oldName)
}
inline std::string* UpdateDoYanTao::_internal_mutable_oldname() {
  
  return oldname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateDoYanTao::release_oldname() {
  // @@protoc_insertion_point(field_release:Protocol.UpdateDoYanTao.oldName)
  
  return oldname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateDoYanTao::set_allocated_oldname(std::string* oldname) {
  if (oldname != nullptr) {
    
  } else {
    
  }
  oldname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), oldname);
  // @@protoc_insertion_point(field_set_allocated:Protocol.UpdateDoYanTao.oldName)
}

// -------------------------------------------------------------------

// C2SUpdateDoYanTao

// repeated .Protocol.UpdateDoYanTao yanTaoList = 1;
inline int C2SUpdateDoYanTao::_internal_yantaolist_size() const {
  return yantaolist_.size();
}
inline int C2SUpdateDoYanTao::yantaolist_size() const {
  return _internal_yantaolist_size();
}
inline void C2SUpdateDoYanTao::clear_yantaolist() {
  yantaolist_.Clear();
}
inline ::Protocol::UpdateDoYanTao* C2SUpdateDoYanTao::mutable_yantaolist(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.C2SUpdateDoYanTao.yanTaoList)
  return yantaolist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UpdateDoYanTao >*
C2SUpdateDoYanTao::mutable_yantaolist() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.C2SUpdateDoYanTao.yanTaoList)
  return &yantaolist_;
}
inline const ::Protocol::UpdateDoYanTao& C2SUpdateDoYanTao::_internal_yantaolist(int index) const {
  return yantaolist_.Get(index);
}
inline const ::Protocol::UpdateDoYanTao& C2SUpdateDoYanTao::yantaolist(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.C2SUpdateDoYanTao.yanTaoList)
  return _internal_yantaolist(index);
}
inline ::Protocol::UpdateDoYanTao* C2SUpdateDoYanTao::_internal_add_yantaolist() {
  return yantaolist_.Add();
}
inline ::Protocol::UpdateDoYanTao* C2SUpdateDoYanTao::add_yantaolist() {
  // @@protoc_insertion_point(field_add:Protocol.C2SUpdateDoYanTao.yanTaoList)
  return _internal_add_yantaolist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UpdateDoYanTao >&
C2SUpdateDoYanTao::yantaolist() const {
  // @@protoc_insertion_point(field_list:Protocol.C2SUpdateDoYanTao.yanTaoList)
  return yantaolist_;
}

// -------------------------------------------------------------------

// C2SDeleteDoYanTao

// repeated string name = 1;
inline int C2SDeleteDoYanTao::_internal_name_size() const {
  return name_.size();
}
inline int C2SDeleteDoYanTao::name_size() const {
  return _internal_name_size();
}
inline void C2SDeleteDoYanTao::clear_name() {
  name_.Clear();
}
inline std::string* C2SDeleteDoYanTao::add_name() {
  // @@protoc_insertion_point(field_add_mutable:Protocol.C2SDeleteDoYanTao.name)
  return _internal_add_name();
}
inline const std::string& C2SDeleteDoYanTao::_internal_name(int index) const {
  return name_.Get(index);
}
inline const std::string& C2SDeleteDoYanTao::name(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.C2SDeleteDoYanTao.name)
  return _internal_name(index);
}
inline std::string* C2SDeleteDoYanTao::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.C2SDeleteDoYanTao.name)
  return name_.Mutable(index);
}
inline void C2SDeleteDoYanTao::set_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Protocol.C2SDeleteDoYanTao.name)
  name_.Mutable(index)->assign(value);
}
inline void C2SDeleteDoYanTao::set_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Protocol.C2SDeleteDoYanTao.name)
  name_.Mutable(index)->assign(std::move(value));
}
inline void C2SDeleteDoYanTao::set_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.C2SDeleteDoYanTao.name)
}
inline void C2SDeleteDoYanTao::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.C2SDeleteDoYanTao.name)
}
inline std::string* C2SDeleteDoYanTao::_internal_add_name() {
  return name_.Add();
}
inline void C2SDeleteDoYanTao::add_name(const std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Protocol.C2SDeleteDoYanTao.name)
}
inline void C2SDeleteDoYanTao::add_name(std::string&& value) {
  name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Protocol.C2SDeleteDoYanTao.name)
}
inline void C2SDeleteDoYanTao::add_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Protocol.C2SDeleteDoYanTao.name)
}
inline void C2SDeleteDoYanTao::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Protocol.C2SDeleteDoYanTao.name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
C2SDeleteDoYanTao::name() const {
  // @@protoc_insertion_point(field_list:Protocol.C2SDeleteDoYanTao.name)
  return name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
C2SDeleteDoYanTao::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.C2SDeleteDoYanTao.name)
  return &name_;
}

// -------------------------------------------------------------------

// DoWeiWen

// string name = 1;
inline void DoWeiWen::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoWeiWen::name() const {
  // @@protoc_insertion_point(field_get:Protocol.DoWeiWen.name)
  return _internal_name();
}
inline void DoWeiWen::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Protocol.DoWeiWen.name)
}
inline std::string* DoWeiWen::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Protocol.DoWeiWen.name)
  return _internal_mutable_name();
}
inline const std::string& DoWeiWen::_internal_name() const {
  return name_.GetNoArena();
}
inline void DoWeiWen::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DoWeiWen::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.DoWeiWen.name)
}
inline void DoWeiWen::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.DoWeiWen.name)
}
inline void DoWeiWen::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.DoWeiWen.name)
}
inline std::string* DoWeiWen::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoWeiWen::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.DoWeiWen.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoWeiWen::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Protocol.DoWeiWen.name)
}

// string SBH = 2;
inline void DoWeiWen::clear_sbh() {
  sbh_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DoWeiWen::sbh() const {
  // @@protoc_insertion_point(field_get:Protocol.DoWeiWen.SBH)
  return _internal_sbh();
}
inline void DoWeiWen::set_sbh(const std::string& value) {
  _internal_set_sbh(value);
  // @@protoc_insertion_point(field_set:Protocol.DoWeiWen.SBH)
}
inline std::string* DoWeiWen::mutable_sbh() {
  // @@protoc_insertion_point(field_mutable:Protocol.DoWeiWen.SBH)
  return _internal_mutable_sbh();
}
inline const std::string& DoWeiWen::_internal_sbh() const {
  return sbh_.GetNoArena();
}
inline void DoWeiWen::_internal_set_sbh(const std::string& value) {
  
  sbh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DoWeiWen::set_sbh(std::string&& value) {
  
  sbh_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.DoWeiWen.SBH)
}
inline void DoWeiWen::set_sbh(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sbh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.DoWeiWen.SBH)
}
inline void DoWeiWen::set_sbh(const char* value, size_t size) {
  
  sbh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.DoWeiWen.SBH)
}
inline std::string* DoWeiWen::_internal_mutable_sbh() {
  
  return sbh_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DoWeiWen::release_sbh() {
  // @@protoc_insertion_point(field_release:Protocol.DoWeiWen.SBH)
  
  return sbh_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DoWeiWen::set_allocated_sbh(std::string* sbh) {
  if (sbh != nullptr) {
    
  } else {
    
  }
  sbh_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sbh);
  // @@protoc_insertion_point(field_set_allocated:Protocol.DoWeiWen.SBH)
}

// -------------------------------------------------------------------

// C2SDoWeiWen

// int32 request = 1;
inline void C2SDoWeiWen::clear_request() {
  request_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C2SDoWeiWen::_internal_request() const {
  return request_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C2SDoWeiWen::request() const {
  // @@protoc_insertion_point(field_get:Protocol.C2SDoWeiWen.request)
  return _internal_request();
}
inline void C2SDoWeiWen::_internal_set_request(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  request_ = value;
}
inline void C2SDoWeiWen::set_request(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_request(value);
  // @@protoc_insertion_point(field_set:Protocol.C2SDoWeiWen.request)
}

// -------------------------------------------------------------------

// S2cDoWeiWen

// repeated .Protocol.WeiWen doWeiWenList = 1;
inline int S2cDoWeiWen::_internal_doweiwenlist_size() const {
  return doweiwenlist_.size();
}
inline int S2cDoWeiWen::doweiwenlist_size() const {
  return _internal_doweiwenlist_size();
}
inline void S2cDoWeiWen::clear_doweiwenlist() {
  doweiwenlist_.Clear();
}
inline ::Protocol::WeiWen* S2cDoWeiWen::mutable_doweiwenlist(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S2cDoWeiWen.doWeiWenList)
  return doweiwenlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::WeiWen >*
S2cDoWeiWen::mutable_doweiwenlist() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2cDoWeiWen.doWeiWenList)
  return &doweiwenlist_;
}
inline const ::Protocol::WeiWen& S2cDoWeiWen::_internal_doweiwenlist(int index) const {
  return doweiwenlist_.Get(index);
}
inline const ::Protocol::WeiWen& S2cDoWeiWen::doweiwenlist(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2cDoWeiWen.doWeiWenList)
  return _internal_doweiwenlist(index);
}
inline ::Protocol::WeiWen* S2cDoWeiWen::_internal_add_doweiwenlist() {
  return doweiwenlist_.Add();
}
inline ::Protocol::WeiWen* S2cDoWeiWen::add_doweiwenlist() {
  // @@protoc_insertion_point(field_add:Protocol.S2cDoWeiWen.doWeiWenList)
  return _internal_add_doweiwenlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::WeiWen >&
S2cDoWeiWen::doweiwenlist() const {
  // @@protoc_insertion_point(field_list:Protocol.S2cDoWeiWen.doWeiWenList)
  return doweiwenlist_;
}

// -------------------------------------------------------------------

// C2SSearchDoWeiwen

// int32 request = 1;
inline void C2SSearchDoWeiwen::clear_request() {
  request_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C2SSearchDoWeiwen::_internal_request() const {
  return request_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C2SSearchDoWeiwen::request() const {
  // @@protoc_insertion_point(field_get:Protocol.C2SSearchDoWeiwen.request)
  return _internal_request();
}
inline void C2SSearchDoWeiwen::_internal_set_request(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  request_ = value;
}
inline void C2SSearchDoWeiwen::set_request(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_request(value);
  // @@protoc_insertion_point(field_set:Protocol.C2SSearchDoWeiwen.request)
}

// -------------------------------------------------------------------

// S2CSearchDoWeiwen

// repeated .Protocol.DoWeiWen doWeiWenList = 1;
inline int S2CSearchDoWeiwen::_internal_doweiwenlist_size() const {
  return doweiwenlist_.size();
}
inline int S2CSearchDoWeiwen::doweiwenlist_size() const {
  return _internal_doweiwenlist_size();
}
inline void S2CSearchDoWeiwen::clear_doweiwenlist() {
  doweiwenlist_.Clear();
}
inline ::Protocol::DoWeiWen* S2CSearchDoWeiwen::mutable_doweiwenlist(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S2CSearchDoWeiwen.doWeiWenList)
  return doweiwenlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::DoWeiWen >*
S2CSearchDoWeiwen::mutable_doweiwenlist() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2CSearchDoWeiwen.doWeiWenList)
  return &doweiwenlist_;
}
inline const ::Protocol::DoWeiWen& S2CSearchDoWeiwen::_internal_doweiwenlist(int index) const {
  return doweiwenlist_.Get(index);
}
inline const ::Protocol::DoWeiWen& S2CSearchDoWeiwen::doweiwenlist(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2CSearchDoWeiwen.doWeiWenList)
  return _internal_doweiwenlist(index);
}
inline ::Protocol::DoWeiWen* S2CSearchDoWeiwen::_internal_add_doweiwenlist() {
  return doweiwenlist_.Add();
}
inline ::Protocol::DoWeiWen* S2CSearchDoWeiwen::add_doweiwenlist() {
  // @@protoc_insertion_point(field_add:Protocol.S2CSearchDoWeiwen.doWeiWenList)
  return _internal_add_doweiwenlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::DoWeiWen >&
S2CSearchDoWeiwen::doweiwenlist() const {
  // @@protoc_insertion_point(field_list:Protocol.S2CSearchDoWeiwen.doWeiWenList)
  return doweiwenlist_;
}

// -------------------------------------------------------------------

// C2SAddDoWeiWen

// repeated .Protocol.DoWeiWen doWeiWenList = 1;
inline int C2SAddDoWeiWen::_internal_doweiwenlist_size() const {
  return doweiwenlist_.size();
}
inline int C2SAddDoWeiWen::doweiwenlist_size() const {
  return _internal_doweiwenlist_size();
}
inline void C2SAddDoWeiWen::clear_doweiwenlist() {
  doweiwenlist_.Clear();
}
inline ::Protocol::DoWeiWen* C2SAddDoWeiWen::mutable_doweiwenlist(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.C2SAddDoWeiWen.doWeiWenList)
  return doweiwenlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::DoWeiWen >*
C2SAddDoWeiWen::mutable_doweiwenlist() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.C2SAddDoWeiWen.doWeiWenList)
  return &doweiwenlist_;
}
inline const ::Protocol::DoWeiWen& C2SAddDoWeiWen::_internal_doweiwenlist(int index) const {
  return doweiwenlist_.Get(index);
}
inline const ::Protocol::DoWeiWen& C2SAddDoWeiWen::doweiwenlist(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.C2SAddDoWeiWen.doWeiWenList)
  return _internal_doweiwenlist(index);
}
inline ::Protocol::DoWeiWen* C2SAddDoWeiWen::_internal_add_doweiwenlist() {
  return doweiwenlist_.Add();
}
inline ::Protocol::DoWeiWen* C2SAddDoWeiWen::add_doweiwenlist() {
  // @@protoc_insertion_point(field_add:Protocol.C2SAddDoWeiWen.doWeiWenList)
  return _internal_add_doweiwenlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::DoWeiWen >&
C2SAddDoWeiWen::doweiwenlist() const {
  // @@protoc_insertion_point(field_list:Protocol.C2SAddDoWeiWen.doWeiWenList)
  return doweiwenlist_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MsgData_2eproto
