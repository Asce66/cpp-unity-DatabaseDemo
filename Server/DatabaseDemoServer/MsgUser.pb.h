// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MsgUser.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MsgUser_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MsgUser_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MsgUser_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MsgUser_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MsgUser_2eproto;
namespace Protocol {
class C2SAddWriters;
class C2SAddWritersDefaultTypeInternal;
extern C2SAddWritersDefaultTypeInternal _C2SAddWriters_default_instance_;
class C2SDeleteWriters;
class C2SDeleteWritersDefaultTypeInternal;
extern C2SDeleteWritersDefaultTypeInternal _C2SDeleteWriters_default_instance_;
class C2SLogin;
class C2SLoginDefaultTypeInternal;
extern C2SLoginDefaultTypeInternal _C2SLogin_default_instance_;
class C2SRegister;
class C2SRegisterDefaultTypeInternal;
extern C2SRegisterDefaultTypeInternal _C2SRegister_default_instance_;
class C2SUpdateWriters;
class C2SUpdateWritersDefaultTypeInternal;
extern C2SUpdateWritersDefaultTypeInternal _C2SUpdateWriters_default_instance_;
class C2SWriter;
class C2SWriterDefaultTypeInternal;
extern C2SWriterDefaultTypeInternal _C2SWriter_default_instance_;
class S2CAddWriters;
class S2CAddWritersDefaultTypeInternal;
extern S2CAddWritersDefaultTypeInternal _S2CAddWriters_default_instance_;
class S2CLogin;
class S2CLoginDefaultTypeInternal;
extern S2CLoginDefaultTypeInternal _S2CLogin_default_instance_;
class S2CRegister;
class S2CRegisterDefaultTypeInternal;
extern S2CRegisterDefaultTypeInternal _S2CRegister_default_instance_;
class S2CWriter;
class S2CWriterDefaultTypeInternal;
extern S2CWriterDefaultTypeInternal _S2CWriter_default_instance_;
class UpdateWriter;
class UpdateWriterDefaultTypeInternal;
extern UpdateWriterDefaultTypeInternal _UpdateWriter_default_instance_;
class Writer;
class WriterDefaultTypeInternal;
extern WriterDefaultTypeInternal _Writer_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C2SAddWriters* Arena::CreateMaybeMessage<::Protocol::C2SAddWriters>(Arena*);
template<> ::Protocol::C2SDeleteWriters* Arena::CreateMaybeMessage<::Protocol::C2SDeleteWriters>(Arena*);
template<> ::Protocol::C2SLogin* Arena::CreateMaybeMessage<::Protocol::C2SLogin>(Arena*);
template<> ::Protocol::C2SRegister* Arena::CreateMaybeMessage<::Protocol::C2SRegister>(Arena*);
template<> ::Protocol::C2SUpdateWriters* Arena::CreateMaybeMessage<::Protocol::C2SUpdateWriters>(Arena*);
template<> ::Protocol::C2SWriter* Arena::CreateMaybeMessage<::Protocol::C2SWriter>(Arena*);
template<> ::Protocol::S2CAddWriters* Arena::CreateMaybeMessage<::Protocol::S2CAddWriters>(Arena*);
template<> ::Protocol::S2CLogin* Arena::CreateMaybeMessage<::Protocol::S2CLogin>(Arena*);
template<> ::Protocol::S2CRegister* Arena::CreateMaybeMessage<::Protocol::S2CRegister>(Arena*);
template<> ::Protocol::S2CWriter* Arena::CreateMaybeMessage<::Protocol::S2CWriter>(Arena*);
template<> ::Protocol::UpdateWriter* Arena::CreateMaybeMessage<::Protocol::UpdateWriter>(Arena*);
template<> ::Protocol::Writer* Arena::CreateMaybeMessage<::Protocol::Writer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class C2SLogin :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2SLogin) */ {
 public:
  C2SLogin();
  virtual ~C2SLogin();

  C2SLogin(const C2SLogin& from);
  C2SLogin(C2SLogin&& from) noexcept
    : C2SLogin() {
    *this = ::std::move(from);
  }

  inline C2SLogin& operator=(const C2SLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2SLogin& operator=(C2SLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2SLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2SLogin* internal_default_instance() {
    return reinterpret_cast<const C2SLogin*>(
               &_C2SLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C2SLogin& a, C2SLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(C2SLogin* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2SLogin* New() const final {
    return CreateMaybeMessage<C2SLogin>(nullptr);
  }

  C2SLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2SLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2SLogin& from);
  void MergeFrom(const C2SLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2SLogin";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgUser_2eproto);
    return ::descriptor_table_MsgUser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2SLogin)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgUser_2eproto;
};
// -------------------------------------------------------------------

class S2CLogin :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2CLogin) */ {
 public:
  S2CLogin();
  virtual ~S2CLogin();

  S2CLogin(const S2CLogin& from);
  S2CLogin(S2CLogin&& from) noexcept
    : S2CLogin() {
    *this = ::std::move(from);
  }

  inline S2CLogin& operator=(const S2CLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2CLogin& operator=(S2CLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const S2CLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2CLogin* internal_default_instance() {
    return reinterpret_cast<const S2CLogin*>(
               &_S2CLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S2CLogin& a, S2CLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(S2CLogin* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S2CLogin* New() const final {
    return CreateMaybeMessage<S2CLogin>(nullptr);
  }

  S2CLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S2CLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S2CLogin& from);
  void MergeFrom(const S2CLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2CLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2CLogin";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgUser_2eproto);
    return ::descriptor_table_MsgUser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kResultFieldNumber = 3,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int32 result = 3;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2CLogin)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgUser_2eproto;
};
// -------------------------------------------------------------------

class C2SRegister :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2SRegister) */ {
 public:
  C2SRegister();
  virtual ~C2SRegister();

  C2SRegister(const C2SRegister& from);
  C2SRegister(C2SRegister&& from) noexcept
    : C2SRegister() {
    *this = ::std::move(from);
  }

  inline C2SRegister& operator=(const C2SRegister& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2SRegister& operator=(C2SRegister&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2SRegister& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2SRegister* internal_default_instance() {
    return reinterpret_cast<const C2SRegister*>(
               &_C2SRegister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C2SRegister& a, C2SRegister& b) {
    a.Swap(&b);
  }
  inline void Swap(C2SRegister* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2SRegister* New() const final {
    return CreateMaybeMessage<C2SRegister>(nullptr);
  }

  C2SRegister* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2SRegister>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2SRegister& from);
  void MergeFrom(const C2SRegister& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SRegister* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2SRegister";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgUser_2eproto);
    return ::descriptor_table_MsgUser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2SRegister)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgUser_2eproto;
};
// -------------------------------------------------------------------

class S2CRegister :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2CRegister) */ {
 public:
  S2CRegister();
  virtual ~S2CRegister();

  S2CRegister(const S2CRegister& from);
  S2CRegister(S2CRegister&& from) noexcept
    : S2CRegister() {
    *this = ::std::move(from);
  }

  inline S2CRegister& operator=(const S2CRegister& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2CRegister& operator=(S2CRegister&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const S2CRegister& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2CRegister* internal_default_instance() {
    return reinterpret_cast<const S2CRegister*>(
               &_S2CRegister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S2CRegister& a, S2CRegister& b) {
    a.Swap(&b);
  }
  inline void Swap(S2CRegister* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S2CRegister* New() const final {
    return CreateMaybeMessage<S2CRegister>(nullptr);
  }

  S2CRegister* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S2CRegister>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S2CRegister& from);
  void MergeFrom(const S2CRegister& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2CRegister* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2CRegister";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgUser_2eproto);
    return ::descriptor_table_MsgUser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2CRegister)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgUser_2eproto;
};
// -------------------------------------------------------------------

class Writer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Writer) */ {
 public:
  Writer();
  virtual ~Writer();

  Writer(const Writer& from);
  Writer(Writer&& from) noexcept
    : Writer() {
    *this = ::std::move(from);
  }

  inline Writer& operator=(const Writer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Writer& operator=(Writer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Writer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Writer* internal_default_instance() {
    return reinterpret_cast<const Writer*>(
               &_Writer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Writer& a, Writer& b) {
    a.Swap(&b);
  }
  inline void Swap(Writer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Writer* New() const final {
    return CreateMaybeMessage<Writer>(nullptr);
  }

  Writer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Writer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Writer& from);
  void MergeFrom(const Writer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Writer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Writer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgUser_2eproto);
    return ::descriptor_table_MsgUser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSexFieldNumber = 2,
    kBHFieldNumber = 3,
    kBirthFieldNumber = 4,
    kBMHFieldNumber = 5,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string sex = 2;
  void clear_sex();
  const std::string& sex() const;
  void set_sex(const std::string& value);
  void set_sex(std::string&& value);
  void set_sex(const char* value);
  void set_sex(const char* value, size_t size);
  std::string* mutable_sex();
  std::string* release_sex();
  void set_allocated_sex(std::string* sex);
  private:
  const std::string& _internal_sex() const;
  void _internal_set_sex(const std::string& value);
  std::string* _internal_mutable_sex();
  public:

  // string BH = 3;
  void clear_bh();
  const std::string& bh() const;
  void set_bh(const std::string& value);
  void set_bh(std::string&& value);
  void set_bh(const char* value);
  void set_bh(const char* value, size_t size);
  std::string* mutable_bh();
  std::string* release_bh();
  void set_allocated_bh(std::string* bh);
  private:
  const std::string& _internal_bh() const;
  void _internal_set_bh(const std::string& value);
  std::string* _internal_mutable_bh();
  public:

  // string birth = 4;
  void clear_birth();
  const std::string& birth() const;
  void set_birth(const std::string& value);
  void set_birth(std::string&& value);
  void set_birth(const char* value);
  void set_birth(const char* value, size_t size);
  std::string* mutable_birth();
  std::string* release_birth();
  void set_allocated_birth(std::string* birth);
  private:
  const std::string& _internal_birth() const;
  void _internal_set_birth(const std::string& value);
  std::string* _internal_mutable_birth();
  public:

  // string BMH = 5;
  void clear_bmh();
  const std::string& bmh() const;
  void set_bmh(const std::string& value);
  void set_bmh(std::string&& value);
  void set_bmh(const char* value);
  void set_bmh(const char* value, size_t size);
  std::string* mutable_bmh();
  std::string* release_bmh();
  void set_allocated_bmh(std::string* bmh);
  private:
  const std::string& _internal_bmh() const;
  void _internal_set_bmh(const std::string& value);
  std::string* _internal_mutable_bmh();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Writer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sex_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bh_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr birth_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bmh_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgUser_2eproto;
};
// -------------------------------------------------------------------

class UpdateWriter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.UpdateWriter) */ {
 public:
  UpdateWriter();
  virtual ~UpdateWriter();

  UpdateWriter(const UpdateWriter& from);
  UpdateWriter(UpdateWriter&& from) noexcept
    : UpdateWriter() {
    *this = ::std::move(from);
  }

  inline UpdateWriter& operator=(const UpdateWriter& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateWriter& operator=(UpdateWriter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateWriter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateWriter* internal_default_instance() {
    return reinterpret_cast<const UpdateWriter*>(
               &_UpdateWriter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdateWriter& a, UpdateWriter& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateWriter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateWriter* New() const final {
    return CreateMaybeMessage<UpdateWriter>(nullptr);
  }

  UpdateWriter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateWriter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateWriter& from);
  void MergeFrom(const UpdateWriter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateWriter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.UpdateWriter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgUser_2eproto);
    return ::descriptor_table_MsgUser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldBHFieldNumber = 1,
    kWriterFieldNumber = 2,
  };
  // string oldBH = 1;
  void clear_oldbh();
  const std::string& oldbh() const;
  void set_oldbh(const std::string& value);
  void set_oldbh(std::string&& value);
  void set_oldbh(const char* value);
  void set_oldbh(const char* value, size_t size);
  std::string* mutable_oldbh();
  std::string* release_oldbh();
  void set_allocated_oldbh(std::string* oldbh);
  private:
  const std::string& _internal_oldbh() const;
  void _internal_set_oldbh(const std::string& value);
  std::string* _internal_mutable_oldbh();
  public:

  // .Protocol.Writer writer = 2;
  bool has_writer() const;
  private:
  bool _internal_has_writer() const;
  public:
  void clear_writer();
  const ::Protocol::Writer& writer() const;
  ::Protocol::Writer* release_writer();
  ::Protocol::Writer* mutable_writer();
  void set_allocated_writer(::Protocol::Writer* writer);
  private:
  const ::Protocol::Writer& _internal_writer() const;
  ::Protocol::Writer* _internal_mutable_writer();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.UpdateWriter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oldbh_;
  ::Protocol::Writer* writer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgUser_2eproto;
};
// -------------------------------------------------------------------

class C2SWriter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2SWriter) */ {
 public:
  C2SWriter();
  virtual ~C2SWriter();

  C2SWriter(const C2SWriter& from);
  C2SWriter(C2SWriter&& from) noexcept
    : C2SWriter() {
    *this = ::std::move(from);
  }

  inline C2SWriter& operator=(const C2SWriter& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2SWriter& operator=(C2SWriter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2SWriter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2SWriter* internal_default_instance() {
    return reinterpret_cast<const C2SWriter*>(
               &_C2SWriter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(C2SWriter& a, C2SWriter& b) {
    a.Swap(&b);
  }
  inline void Swap(C2SWriter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2SWriter* New() const final {
    return CreateMaybeMessage<C2SWriter>(nullptr);
  }

  C2SWriter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2SWriter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2SWriter& from);
  void MergeFrom(const C2SWriter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SWriter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2SWriter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgUser_2eproto);
    return ::descriptor_table_MsgUser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
  };
  // int32 request = 1;
  void clear_request();
  ::PROTOBUF_NAMESPACE_ID::int32 request() const;
  void set_request(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_request() const;
  void _internal_set_request(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2SWriter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgUser_2eproto;
};
// -------------------------------------------------------------------

class S2CWriter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2CWriter) */ {
 public:
  S2CWriter();
  virtual ~S2CWriter();

  S2CWriter(const S2CWriter& from);
  S2CWriter(S2CWriter&& from) noexcept
    : S2CWriter() {
    *this = ::std::move(from);
  }

  inline S2CWriter& operator=(const S2CWriter& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2CWriter& operator=(S2CWriter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const S2CWriter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2CWriter* internal_default_instance() {
    return reinterpret_cast<const S2CWriter*>(
               &_S2CWriter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(S2CWriter& a, S2CWriter& b) {
    a.Swap(&b);
  }
  inline void Swap(S2CWriter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S2CWriter* New() const final {
    return CreateMaybeMessage<S2CWriter>(nullptr);
  }

  S2CWriter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S2CWriter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S2CWriter& from);
  void MergeFrom(const S2CWriter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2CWriter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2CWriter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgUser_2eproto);
    return ::descriptor_table_MsgUser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWriterListFieldNumber = 1,
  };
  // repeated .Protocol.Writer writerList = 1;
  int writerlist_size() const;
  private:
  int _internal_writerlist_size() const;
  public:
  void clear_writerlist();
  ::Protocol::Writer* mutable_writerlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Writer >*
      mutable_writerlist();
  private:
  const ::Protocol::Writer& _internal_writerlist(int index) const;
  ::Protocol::Writer* _internal_add_writerlist();
  public:
  const ::Protocol::Writer& writerlist(int index) const;
  ::Protocol::Writer* add_writerlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Writer >&
      writerlist() const;

  // @@protoc_insertion_point(class_scope:Protocol.S2CWriter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Writer > writerlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgUser_2eproto;
};
// -------------------------------------------------------------------

class C2SAddWriters :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2SAddWriters) */ {
 public:
  C2SAddWriters();
  virtual ~C2SAddWriters();

  C2SAddWriters(const C2SAddWriters& from);
  C2SAddWriters(C2SAddWriters&& from) noexcept
    : C2SAddWriters() {
    *this = ::std::move(from);
  }

  inline C2SAddWriters& operator=(const C2SAddWriters& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2SAddWriters& operator=(C2SAddWriters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2SAddWriters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2SAddWriters* internal_default_instance() {
    return reinterpret_cast<const C2SAddWriters*>(
               &_C2SAddWriters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(C2SAddWriters& a, C2SAddWriters& b) {
    a.Swap(&b);
  }
  inline void Swap(C2SAddWriters* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2SAddWriters* New() const final {
    return CreateMaybeMessage<C2SAddWriters>(nullptr);
  }

  C2SAddWriters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2SAddWriters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2SAddWriters& from);
  void MergeFrom(const C2SAddWriters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SAddWriters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2SAddWriters";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgUser_2eproto);
    return ::descriptor_table_MsgUser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWriterListFieldNumber = 1,
  };
  // repeated .Protocol.Writer writerList = 1;
  int writerlist_size() const;
  private:
  int _internal_writerlist_size() const;
  public:
  void clear_writerlist();
  ::Protocol::Writer* mutable_writerlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Writer >*
      mutable_writerlist();
  private:
  const ::Protocol::Writer& _internal_writerlist(int index) const;
  ::Protocol::Writer* _internal_add_writerlist();
  public:
  const ::Protocol::Writer& writerlist(int index) const;
  ::Protocol::Writer* add_writerlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Writer >&
      writerlist() const;

  // @@protoc_insertion_point(class_scope:Protocol.C2SAddWriters)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Writer > writerlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgUser_2eproto;
};
// -------------------------------------------------------------------

class S2CAddWriters :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2CAddWriters) */ {
 public:
  S2CAddWriters();
  virtual ~S2CAddWriters();

  S2CAddWriters(const S2CAddWriters& from);
  S2CAddWriters(S2CAddWriters&& from) noexcept
    : S2CAddWriters() {
    *this = ::std::move(from);
  }

  inline S2CAddWriters& operator=(const S2CAddWriters& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2CAddWriters& operator=(S2CAddWriters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const S2CAddWriters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2CAddWriters* internal_default_instance() {
    return reinterpret_cast<const S2CAddWriters*>(
               &_S2CAddWriters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(S2CAddWriters& a, S2CAddWriters& b) {
    a.Swap(&b);
  }
  inline void Swap(S2CAddWriters* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S2CAddWriters* New() const final {
    return CreateMaybeMessage<S2CAddWriters>(nullptr);
  }

  S2CAddWriters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S2CAddWriters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S2CAddWriters& from);
  void MergeFrom(const S2CAddWriters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2CAddWriters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2CAddWriters";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgUser_2eproto);
    return ::descriptor_table_MsgUser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2CAddWriters)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgUser_2eproto;
};
// -------------------------------------------------------------------

class C2SDeleteWriters :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2SDeleteWriters) */ {
 public:
  C2SDeleteWriters();
  virtual ~C2SDeleteWriters();

  C2SDeleteWriters(const C2SDeleteWriters& from);
  C2SDeleteWriters(C2SDeleteWriters&& from) noexcept
    : C2SDeleteWriters() {
    *this = ::std::move(from);
  }

  inline C2SDeleteWriters& operator=(const C2SDeleteWriters& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2SDeleteWriters& operator=(C2SDeleteWriters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2SDeleteWriters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2SDeleteWriters* internal_default_instance() {
    return reinterpret_cast<const C2SDeleteWriters*>(
               &_C2SDeleteWriters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(C2SDeleteWriters& a, C2SDeleteWriters& b) {
    a.Swap(&b);
  }
  inline void Swap(C2SDeleteWriters* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2SDeleteWriters* New() const final {
    return CreateMaybeMessage<C2SDeleteWriters>(nullptr);
  }

  C2SDeleteWriters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2SDeleteWriters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2SDeleteWriters& from);
  void MergeFrom(const C2SDeleteWriters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SDeleteWriters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2SDeleteWriters";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgUser_2eproto);
    return ::descriptor_table_MsgUser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWriterListFieldNumber = 1,
  };
  // repeated string writerList = 1;
  int writerlist_size() const;
  private:
  int _internal_writerlist_size() const;
  public:
  void clear_writerlist();
  const std::string& writerlist(int index) const;
  std::string* mutable_writerlist(int index);
  void set_writerlist(int index, const std::string& value);
  void set_writerlist(int index, std::string&& value);
  void set_writerlist(int index, const char* value);
  void set_writerlist(int index, const char* value, size_t size);
  std::string* add_writerlist();
  void add_writerlist(const std::string& value);
  void add_writerlist(std::string&& value);
  void add_writerlist(const char* value);
  void add_writerlist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& writerlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_writerlist();
  private:
  const std::string& _internal_writerlist(int index) const;
  std::string* _internal_add_writerlist();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2SDeleteWriters)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> writerlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgUser_2eproto;
};
// -------------------------------------------------------------------

class C2SUpdateWriters :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2SUpdateWriters) */ {
 public:
  C2SUpdateWriters();
  virtual ~C2SUpdateWriters();

  C2SUpdateWriters(const C2SUpdateWriters& from);
  C2SUpdateWriters(C2SUpdateWriters&& from) noexcept
    : C2SUpdateWriters() {
    *this = ::std::move(from);
  }

  inline C2SUpdateWriters& operator=(const C2SUpdateWriters& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2SUpdateWriters& operator=(C2SUpdateWriters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2SUpdateWriters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2SUpdateWriters* internal_default_instance() {
    return reinterpret_cast<const C2SUpdateWriters*>(
               &_C2SUpdateWriters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(C2SUpdateWriters& a, C2SUpdateWriters& b) {
    a.Swap(&b);
  }
  inline void Swap(C2SUpdateWriters* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2SUpdateWriters* New() const final {
    return CreateMaybeMessage<C2SUpdateWriters>(nullptr);
  }

  C2SUpdateWriters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2SUpdateWriters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2SUpdateWriters& from);
  void MergeFrom(const C2SUpdateWriters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2SUpdateWriters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2SUpdateWriters";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MsgUser_2eproto);
    return ::descriptor_table_MsgUser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWriterListFieldNumber = 1,
  };
  // repeated .Protocol.UpdateWriter writerList = 1;
  int writerlist_size() const;
  private:
  int _internal_writerlist_size() const;
  public:
  void clear_writerlist();
  ::Protocol::UpdateWriter* mutable_writerlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UpdateWriter >*
      mutable_writerlist();
  private:
  const ::Protocol::UpdateWriter& _internal_writerlist(int index) const;
  ::Protocol::UpdateWriter* _internal_add_writerlist();
  public:
  const ::Protocol::UpdateWriter& writerlist(int index) const;
  ::Protocol::UpdateWriter* add_writerlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UpdateWriter >&
      writerlist() const;

  // @@protoc_insertion_point(class_scope:Protocol.C2SUpdateWriters)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UpdateWriter > writerlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MsgUser_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C2SLogin

// string account = 1;
inline void C2SLogin::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& C2SLogin::account() const {
  // @@protoc_insertion_point(field_get:Protocol.C2SLogin.account)
  return _internal_account();
}
inline void C2SLogin::set_account(const std::string& value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:Protocol.C2SLogin.account)
}
inline std::string* C2SLogin::mutable_account() {
  // @@protoc_insertion_point(field_mutable:Protocol.C2SLogin.account)
  return _internal_mutable_account();
}
inline const std::string& C2SLogin::_internal_account() const {
  return account_.GetNoArena();
}
inline void C2SLogin::_internal_set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void C2SLogin::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.C2SLogin.account)
}
inline void C2SLogin::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.C2SLogin.account)
}
inline void C2SLogin::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.C2SLogin.account)
}
inline std::string* C2SLogin::_internal_mutable_account() {
  
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* C2SLogin::release_account() {
  // @@protoc_insertion_point(field_release:Protocol.C2SLogin.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void C2SLogin::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2SLogin.account)
}

// string password = 2;
inline void C2SLogin::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& C2SLogin::password() const {
  // @@protoc_insertion_point(field_get:Protocol.C2SLogin.password)
  return _internal_password();
}
inline void C2SLogin::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:Protocol.C2SLogin.password)
}
inline std::string* C2SLogin::mutable_password() {
  // @@protoc_insertion_point(field_mutable:Protocol.C2SLogin.password)
  return _internal_mutable_password();
}
inline const std::string& C2SLogin::_internal_password() const {
  return password_.GetNoArena();
}
inline void C2SLogin::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void C2SLogin::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.C2SLogin.password)
}
inline void C2SLogin::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.C2SLogin.password)
}
inline void C2SLogin::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.C2SLogin.password)
}
inline std::string* C2SLogin::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* C2SLogin::release_password() {
  // @@protoc_insertion_point(field_release:Protocol.C2SLogin.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void C2SLogin::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2SLogin.password)
}

// -------------------------------------------------------------------

// S2CLogin

// string account = 1;
inline void S2CLogin::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& S2CLogin::account() const {
  // @@protoc_insertion_point(field_get:Protocol.S2CLogin.account)
  return _internal_account();
}
inline void S2CLogin::set_account(const std::string& value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:Protocol.S2CLogin.account)
}
inline std::string* S2CLogin::mutable_account() {
  // @@protoc_insertion_point(field_mutable:Protocol.S2CLogin.account)
  return _internal_mutable_account();
}
inline const std::string& S2CLogin::_internal_account() const {
  return account_.GetNoArena();
}
inline void S2CLogin::_internal_set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void S2CLogin::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.S2CLogin.account)
}
inline void S2CLogin::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.S2CLogin.account)
}
inline void S2CLogin::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.S2CLogin.account)
}
inline std::string* S2CLogin::_internal_mutable_account() {
  
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* S2CLogin::release_account() {
  // @@protoc_insertion_point(field_release:Protocol.S2CLogin.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void S2CLogin::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2CLogin.account)
}

// string password = 2;
inline void S2CLogin::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& S2CLogin::password() const {
  // @@protoc_insertion_point(field_get:Protocol.S2CLogin.password)
  return _internal_password();
}
inline void S2CLogin::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:Protocol.S2CLogin.password)
}
inline std::string* S2CLogin::mutable_password() {
  // @@protoc_insertion_point(field_mutable:Protocol.S2CLogin.password)
  return _internal_mutable_password();
}
inline const std::string& S2CLogin::_internal_password() const {
  return password_.GetNoArena();
}
inline void S2CLogin::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void S2CLogin::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.S2CLogin.password)
}
inline void S2CLogin::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.S2CLogin.password)
}
inline void S2CLogin::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.S2CLogin.password)
}
inline std::string* S2CLogin::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* S2CLogin::release_password() {
  // @@protoc_insertion_point(field_release:Protocol.S2CLogin.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void S2CLogin::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2CLogin.password)
}

// int32 result = 3;
inline void S2CLogin::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S2CLogin::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S2CLogin::result() const {
  // @@protoc_insertion_point(field_get:Protocol.S2CLogin.result)
  return _internal_result();
}
inline void S2CLogin::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void S2CLogin::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:Protocol.S2CLogin.result)
}

// -------------------------------------------------------------------

// C2SRegister

// string account = 1;
inline void C2SRegister::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& C2SRegister::account() const {
  // @@protoc_insertion_point(field_get:Protocol.C2SRegister.account)
  return _internal_account();
}
inline void C2SRegister::set_account(const std::string& value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:Protocol.C2SRegister.account)
}
inline std::string* C2SRegister::mutable_account() {
  // @@protoc_insertion_point(field_mutable:Protocol.C2SRegister.account)
  return _internal_mutable_account();
}
inline const std::string& C2SRegister::_internal_account() const {
  return account_.GetNoArena();
}
inline void C2SRegister::_internal_set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void C2SRegister::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.C2SRegister.account)
}
inline void C2SRegister::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.C2SRegister.account)
}
inline void C2SRegister::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.C2SRegister.account)
}
inline std::string* C2SRegister::_internal_mutable_account() {
  
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* C2SRegister::release_account() {
  // @@protoc_insertion_point(field_release:Protocol.C2SRegister.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void C2SRegister::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2SRegister.account)
}

// string password = 2;
inline void C2SRegister::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& C2SRegister::password() const {
  // @@protoc_insertion_point(field_get:Protocol.C2SRegister.password)
  return _internal_password();
}
inline void C2SRegister::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:Protocol.C2SRegister.password)
}
inline std::string* C2SRegister::mutable_password() {
  // @@protoc_insertion_point(field_mutable:Protocol.C2SRegister.password)
  return _internal_mutable_password();
}
inline const std::string& C2SRegister::_internal_password() const {
  return password_.GetNoArena();
}
inline void C2SRegister::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void C2SRegister::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.C2SRegister.password)
}
inline void C2SRegister::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.C2SRegister.password)
}
inline void C2SRegister::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.C2SRegister.password)
}
inline std::string* C2SRegister::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* C2SRegister::release_password() {
  // @@protoc_insertion_point(field_release:Protocol.C2SRegister.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void C2SRegister::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2SRegister.password)
}

// -------------------------------------------------------------------

// S2CRegister

// int32 result = 1;
inline void S2CRegister::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S2CRegister::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S2CRegister::result() const {
  // @@protoc_insertion_point(field_get:Protocol.S2CRegister.result)
  return _internal_result();
}
inline void S2CRegister::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void S2CRegister::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:Protocol.S2CRegister.result)
}

// -------------------------------------------------------------------

// Writer

// string name = 1;
inline void Writer::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Writer::name() const {
  // @@protoc_insertion_point(field_get:Protocol.Writer.name)
  return _internal_name();
}
inline void Writer::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Protocol.Writer.name)
}
inline std::string* Writer::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Protocol.Writer.name)
  return _internal_mutable_name();
}
inline const std::string& Writer::_internal_name() const {
  return name_.GetNoArena();
}
inline void Writer::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Writer::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.Writer.name)
}
inline void Writer::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.Writer.name)
}
inline void Writer::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.Writer.name)
}
inline std::string* Writer::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Writer::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.Writer.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Writer::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Protocol.Writer.name)
}

// string sex = 2;
inline void Writer::clear_sex() {
  sex_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Writer::sex() const {
  // @@protoc_insertion_point(field_get:Protocol.Writer.sex)
  return _internal_sex();
}
inline void Writer::set_sex(const std::string& value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:Protocol.Writer.sex)
}
inline std::string* Writer::mutable_sex() {
  // @@protoc_insertion_point(field_mutable:Protocol.Writer.sex)
  return _internal_mutable_sex();
}
inline const std::string& Writer::_internal_sex() const {
  return sex_.GetNoArena();
}
inline void Writer::_internal_set_sex(const std::string& value) {
  
  sex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Writer::set_sex(std::string&& value) {
  
  sex_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.Writer.sex)
}
inline void Writer::set_sex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.Writer.sex)
}
inline void Writer::set_sex(const char* value, size_t size) {
  
  sex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.Writer.sex)
}
inline std::string* Writer::_internal_mutable_sex() {
  
  return sex_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Writer::release_sex() {
  // @@protoc_insertion_point(field_release:Protocol.Writer.sex)
  
  return sex_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Writer::set_allocated_sex(std::string* sex) {
  if (sex != nullptr) {
    
  } else {
    
  }
  sex_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sex);
  // @@protoc_insertion_point(field_set_allocated:Protocol.Writer.sex)
}

// string BH = 3;
inline void Writer::clear_bh() {
  bh_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Writer::bh() const {
  // @@protoc_insertion_point(field_get:Protocol.Writer.BH)
  return _internal_bh();
}
inline void Writer::set_bh(const std::string& value) {
  _internal_set_bh(value);
  // @@protoc_insertion_point(field_set:Protocol.Writer.BH)
}
inline std::string* Writer::mutable_bh() {
  // @@protoc_insertion_point(field_mutable:Protocol.Writer.BH)
  return _internal_mutable_bh();
}
inline const std::string& Writer::_internal_bh() const {
  return bh_.GetNoArena();
}
inline void Writer::_internal_set_bh(const std::string& value) {
  
  bh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Writer::set_bh(std::string&& value) {
  
  bh_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.Writer.BH)
}
inline void Writer::set_bh(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.Writer.BH)
}
inline void Writer::set_bh(const char* value, size_t size) {
  
  bh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.Writer.BH)
}
inline std::string* Writer::_internal_mutable_bh() {
  
  return bh_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Writer::release_bh() {
  // @@protoc_insertion_point(field_release:Protocol.Writer.BH)
  
  return bh_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Writer::set_allocated_bh(std::string* bh) {
  if (bh != nullptr) {
    
  } else {
    
  }
  bh_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bh);
  // @@protoc_insertion_point(field_set_allocated:Protocol.Writer.BH)
}

// string birth = 4;
inline void Writer::clear_birth() {
  birth_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Writer::birth() const {
  // @@protoc_insertion_point(field_get:Protocol.Writer.birth)
  return _internal_birth();
}
inline void Writer::set_birth(const std::string& value) {
  _internal_set_birth(value);
  // @@protoc_insertion_point(field_set:Protocol.Writer.birth)
}
inline std::string* Writer::mutable_birth() {
  // @@protoc_insertion_point(field_mutable:Protocol.Writer.birth)
  return _internal_mutable_birth();
}
inline const std::string& Writer::_internal_birth() const {
  return birth_.GetNoArena();
}
inline void Writer::_internal_set_birth(const std::string& value) {
  
  birth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Writer::set_birth(std::string&& value) {
  
  birth_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.Writer.birth)
}
inline void Writer::set_birth(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  birth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.Writer.birth)
}
inline void Writer::set_birth(const char* value, size_t size) {
  
  birth_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.Writer.birth)
}
inline std::string* Writer::_internal_mutable_birth() {
  
  return birth_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Writer::release_birth() {
  // @@protoc_insertion_point(field_release:Protocol.Writer.birth)
  
  return birth_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Writer::set_allocated_birth(std::string* birth) {
  if (birth != nullptr) {
    
  } else {
    
  }
  birth_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), birth);
  // @@protoc_insertion_point(field_set_allocated:Protocol.Writer.birth)
}

// string BMH = 5;
inline void Writer::clear_bmh() {
  bmh_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Writer::bmh() const {
  // @@protoc_insertion_point(field_get:Protocol.Writer.BMH)
  return _internal_bmh();
}
inline void Writer::set_bmh(const std::string& value) {
  _internal_set_bmh(value);
  // @@protoc_insertion_point(field_set:Protocol.Writer.BMH)
}
inline std::string* Writer::mutable_bmh() {
  // @@protoc_insertion_point(field_mutable:Protocol.Writer.BMH)
  return _internal_mutable_bmh();
}
inline const std::string& Writer::_internal_bmh() const {
  return bmh_.GetNoArena();
}
inline void Writer::_internal_set_bmh(const std::string& value) {
  
  bmh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Writer::set_bmh(std::string&& value) {
  
  bmh_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.Writer.BMH)
}
inline void Writer::set_bmh(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bmh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.Writer.BMH)
}
inline void Writer::set_bmh(const char* value, size_t size) {
  
  bmh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.Writer.BMH)
}
inline std::string* Writer::_internal_mutable_bmh() {
  
  return bmh_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Writer::release_bmh() {
  // @@protoc_insertion_point(field_release:Protocol.Writer.BMH)
  
  return bmh_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Writer::set_allocated_bmh(std::string* bmh) {
  if (bmh != nullptr) {
    
  } else {
    
  }
  bmh_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bmh);
  // @@protoc_insertion_point(field_set_allocated:Protocol.Writer.BMH)
}

// -------------------------------------------------------------------

// UpdateWriter

// string oldBH = 1;
inline void UpdateWriter::clear_oldbh() {
  oldbh_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateWriter::oldbh() const {
  // @@protoc_insertion_point(field_get:Protocol.UpdateWriter.oldBH)
  return _internal_oldbh();
}
inline void UpdateWriter::set_oldbh(const std::string& value) {
  _internal_set_oldbh(value);
  // @@protoc_insertion_point(field_set:Protocol.UpdateWriter.oldBH)
}
inline std::string* UpdateWriter::mutable_oldbh() {
  // @@protoc_insertion_point(field_mutable:Protocol.UpdateWriter.oldBH)
  return _internal_mutable_oldbh();
}
inline const std::string& UpdateWriter::_internal_oldbh() const {
  return oldbh_.GetNoArena();
}
inline void UpdateWriter::_internal_set_oldbh(const std::string& value) {
  
  oldbh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpdateWriter::set_oldbh(std::string&& value) {
  
  oldbh_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Protocol.UpdateWriter.oldBH)
}
inline void UpdateWriter::set_oldbh(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  oldbh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Protocol.UpdateWriter.oldBH)
}
inline void UpdateWriter::set_oldbh(const char* value, size_t size) {
  
  oldbh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Protocol.UpdateWriter.oldBH)
}
inline std::string* UpdateWriter::_internal_mutable_oldbh() {
  
  return oldbh_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateWriter::release_oldbh() {
  // @@protoc_insertion_point(field_release:Protocol.UpdateWriter.oldBH)
  
  return oldbh_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateWriter::set_allocated_oldbh(std::string* oldbh) {
  if (oldbh != nullptr) {
    
  } else {
    
  }
  oldbh_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), oldbh);
  // @@protoc_insertion_point(field_set_allocated:Protocol.UpdateWriter.oldBH)
}

// .Protocol.Writer writer = 2;
inline bool UpdateWriter::_internal_has_writer() const {
  return this != internal_default_instance() && writer_ != nullptr;
}
inline bool UpdateWriter::has_writer() const {
  return _internal_has_writer();
}
inline void UpdateWriter::clear_writer() {
  if (GetArenaNoVirtual() == nullptr && writer_ != nullptr) {
    delete writer_;
  }
  writer_ = nullptr;
}
inline const ::Protocol::Writer& UpdateWriter::_internal_writer() const {
  const ::Protocol::Writer* p = writer_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Protocol::Writer*>(
      &::Protocol::_Writer_default_instance_);
}
inline const ::Protocol::Writer& UpdateWriter::writer() const {
  // @@protoc_insertion_point(field_get:Protocol.UpdateWriter.writer)
  return _internal_writer();
}
inline ::Protocol::Writer* UpdateWriter::release_writer() {
  // @@protoc_insertion_point(field_release:Protocol.UpdateWriter.writer)
  
  ::Protocol::Writer* temp = writer_;
  writer_ = nullptr;
  return temp;
}
inline ::Protocol::Writer* UpdateWriter::_internal_mutable_writer() {
  
  if (writer_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Writer>(GetArenaNoVirtual());
    writer_ = p;
  }
  return writer_;
}
inline ::Protocol::Writer* UpdateWriter::mutable_writer() {
  // @@protoc_insertion_point(field_mutable:Protocol.UpdateWriter.writer)
  return _internal_mutable_writer();
}
inline void UpdateWriter::set_allocated_writer(::Protocol::Writer* writer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete writer_;
  }
  if (writer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      writer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, writer, submessage_arena);
    }
    
  } else {
    
  }
  writer_ = writer;
  // @@protoc_insertion_point(field_set_allocated:Protocol.UpdateWriter.writer)
}

// -------------------------------------------------------------------

// C2SWriter

// int32 request = 1;
inline void C2SWriter::clear_request() {
  request_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C2SWriter::_internal_request() const {
  return request_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C2SWriter::request() const {
  // @@protoc_insertion_point(field_get:Protocol.C2SWriter.request)
  return _internal_request();
}
inline void C2SWriter::_internal_set_request(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  request_ = value;
}
inline void C2SWriter::set_request(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_request(value);
  // @@protoc_insertion_point(field_set:Protocol.C2SWriter.request)
}

// -------------------------------------------------------------------

// S2CWriter

// repeated .Protocol.Writer writerList = 1;
inline int S2CWriter::_internal_writerlist_size() const {
  return writerlist_.size();
}
inline int S2CWriter::writerlist_size() const {
  return _internal_writerlist_size();
}
inline void S2CWriter::clear_writerlist() {
  writerlist_.Clear();
}
inline ::Protocol::Writer* S2CWriter::mutable_writerlist(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S2CWriter.writerList)
  return writerlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Writer >*
S2CWriter::mutable_writerlist() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2CWriter.writerList)
  return &writerlist_;
}
inline const ::Protocol::Writer& S2CWriter::_internal_writerlist(int index) const {
  return writerlist_.Get(index);
}
inline const ::Protocol::Writer& S2CWriter::writerlist(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2CWriter.writerList)
  return _internal_writerlist(index);
}
inline ::Protocol::Writer* S2CWriter::_internal_add_writerlist() {
  return writerlist_.Add();
}
inline ::Protocol::Writer* S2CWriter::add_writerlist() {
  // @@protoc_insertion_point(field_add:Protocol.S2CWriter.writerList)
  return _internal_add_writerlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Writer >&
S2CWriter::writerlist() const {
  // @@protoc_insertion_point(field_list:Protocol.S2CWriter.writerList)
  return writerlist_;
}

// -------------------------------------------------------------------

// C2SAddWriters

// repeated .Protocol.Writer writerList = 1;
inline int C2SAddWriters::_internal_writerlist_size() const {
  return writerlist_.size();
}
inline int C2SAddWriters::writerlist_size() const {
  return _internal_writerlist_size();
}
inline void C2SAddWriters::clear_writerlist() {
  writerlist_.Clear();
}
inline ::Protocol::Writer* C2SAddWriters::mutable_writerlist(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.C2SAddWriters.writerList)
  return writerlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Writer >*
C2SAddWriters::mutable_writerlist() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.C2SAddWriters.writerList)
  return &writerlist_;
}
inline const ::Protocol::Writer& C2SAddWriters::_internal_writerlist(int index) const {
  return writerlist_.Get(index);
}
inline const ::Protocol::Writer& C2SAddWriters::writerlist(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.C2SAddWriters.writerList)
  return _internal_writerlist(index);
}
inline ::Protocol::Writer* C2SAddWriters::_internal_add_writerlist() {
  return writerlist_.Add();
}
inline ::Protocol::Writer* C2SAddWriters::add_writerlist() {
  // @@protoc_insertion_point(field_add:Protocol.C2SAddWriters.writerList)
  return _internal_add_writerlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Writer >&
C2SAddWriters::writerlist() const {
  // @@protoc_insertion_point(field_list:Protocol.C2SAddWriters.writerList)
  return writerlist_;
}

// -------------------------------------------------------------------

// S2CAddWriters

// int32 result = 1;
inline void S2CAddWriters::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S2CAddWriters::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S2CAddWriters::result() const {
  // @@protoc_insertion_point(field_get:Protocol.S2CAddWriters.result)
  return _internal_result();
}
inline void S2CAddWriters::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void S2CAddWriters::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:Protocol.S2CAddWriters.result)
}

// -------------------------------------------------------------------

// C2SDeleteWriters

// repeated string writerList = 1;
inline int C2SDeleteWriters::_internal_writerlist_size() const {
  return writerlist_.size();
}
inline int C2SDeleteWriters::writerlist_size() const {
  return _internal_writerlist_size();
}
inline void C2SDeleteWriters::clear_writerlist() {
  writerlist_.Clear();
}
inline std::string* C2SDeleteWriters::add_writerlist() {
  // @@protoc_insertion_point(field_add_mutable:Protocol.C2SDeleteWriters.writerList)
  return _internal_add_writerlist();
}
inline const std::string& C2SDeleteWriters::_internal_writerlist(int index) const {
  return writerlist_.Get(index);
}
inline const std::string& C2SDeleteWriters::writerlist(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.C2SDeleteWriters.writerList)
  return _internal_writerlist(index);
}
inline std::string* C2SDeleteWriters::mutable_writerlist(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.C2SDeleteWriters.writerList)
  return writerlist_.Mutable(index);
}
inline void C2SDeleteWriters::set_writerlist(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Protocol.C2SDeleteWriters.writerList)
  writerlist_.Mutable(index)->assign(value);
}
inline void C2SDeleteWriters::set_writerlist(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Protocol.C2SDeleteWriters.writerList)
  writerlist_.Mutable(index)->assign(std::move(value));
}
inline void C2SDeleteWriters::set_writerlist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  writerlist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.C2SDeleteWriters.writerList)
}
inline void C2SDeleteWriters::set_writerlist(int index, const char* value, size_t size) {
  writerlist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.C2SDeleteWriters.writerList)
}
inline std::string* C2SDeleteWriters::_internal_add_writerlist() {
  return writerlist_.Add();
}
inline void C2SDeleteWriters::add_writerlist(const std::string& value) {
  writerlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Protocol.C2SDeleteWriters.writerList)
}
inline void C2SDeleteWriters::add_writerlist(std::string&& value) {
  writerlist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Protocol.C2SDeleteWriters.writerList)
}
inline void C2SDeleteWriters::add_writerlist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  writerlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Protocol.C2SDeleteWriters.writerList)
}
inline void C2SDeleteWriters::add_writerlist(const char* value, size_t size) {
  writerlist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Protocol.C2SDeleteWriters.writerList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
C2SDeleteWriters::writerlist() const {
  // @@protoc_insertion_point(field_list:Protocol.C2SDeleteWriters.writerList)
  return writerlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
C2SDeleteWriters::mutable_writerlist() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.C2SDeleteWriters.writerList)
  return &writerlist_;
}

// -------------------------------------------------------------------

// C2SUpdateWriters

// repeated .Protocol.UpdateWriter writerList = 1;
inline int C2SUpdateWriters::_internal_writerlist_size() const {
  return writerlist_.size();
}
inline int C2SUpdateWriters::writerlist_size() const {
  return _internal_writerlist_size();
}
inline void C2SUpdateWriters::clear_writerlist() {
  writerlist_.Clear();
}
inline ::Protocol::UpdateWriter* C2SUpdateWriters::mutable_writerlist(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.C2SUpdateWriters.writerList)
  return writerlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UpdateWriter >*
C2SUpdateWriters::mutable_writerlist() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.C2SUpdateWriters.writerList)
  return &writerlist_;
}
inline const ::Protocol::UpdateWriter& C2SUpdateWriters::_internal_writerlist(int index) const {
  return writerlist_.Get(index);
}
inline const ::Protocol::UpdateWriter& C2SUpdateWriters::writerlist(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.C2SUpdateWriters.writerList)
  return _internal_writerlist(index);
}
inline ::Protocol::UpdateWriter* C2SUpdateWriters::_internal_add_writerlist() {
  return writerlist_.Add();
}
inline ::Protocol::UpdateWriter* C2SUpdateWriters::add_writerlist() {
  // @@protoc_insertion_point(field_add:Protocol.C2SUpdateWriters.writerList)
  return _internal_add_writerlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UpdateWriter >&
C2SUpdateWriters::writerlist() const {
  // @@protoc_insertion_point(field_list:Protocol.C2SUpdateWriters.writerList)
  return writerlist_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MsgUser_2eproto
